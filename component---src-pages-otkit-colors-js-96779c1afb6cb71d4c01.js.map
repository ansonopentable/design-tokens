{"version":3,"sources":["webpack:///component---src-pages-otkit-colors-js-96779c1afb6cb71d4c01.js","webpack:///../OTKit/otkit-colors/token.common.js","webpack:///./~/chroma-js/chroma.js","webpack:///./src/pages/otkit-colors.js","webpack:///./src/styles/otkit-colors.module.css"],"names":["webpackJsonp","77","module","exports","greenDark","fuchsiaLight","aquaLightest","tealLightest","purpleLightest","orangeDarker","blueLightest","blueLight","green","violetDark","orangeLighter","tealLight","aquaLight","purpleLight","fuchsiaLightest","tealDark","ashLightest","purpleDark","redLighter","aquaDark","violetLight","white","blueDark","yellowLightest","yellowLighter","fuchsiaDark","greenLight","redLightest","ashLighter","ashDark","greenDarker","fuchsiaLighter","orange","yellowDark","orangeLightest","blueLighter","red","violetDarker","tealLighter","aquaLighter","redDark","purpleLighter","yellow","purpleDarker","aquaDarker","tealDarker","violetLighter","orangeDark","ash","blueDarker","orangeLight","fuchsia","fuchsiaDarker","greenLighter","greenLightest","blue","redLight","ashDarker","yellowDarker","teal","aqua","purple","yellowLight","violetLightest","violet","ashLight","redDarker","94","__webpack_require__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Color","DEG2RAD","LAB_CONSTANTS","PI","PITHIRD","RAD2DEG","TWOPI","_average_lrgb","_guess_formats","_guess_formats_sorted","_input","_interpolators","abs","atan2","bezier","blend","blend_f","brewer","burn","chroma","clip_rgb","cmyk2rgb","colors","cos","css2rgb","darken","dodge","each","floor","hcg2rgb","hex2rgb","hsi2rgb","hsl2css","hsl2rgb","hsv2rgb","interpolate","interpolate_hsx","interpolate_lab","interpolate_lrgb","interpolate_num","interpolate_rgb","lab2lch","lab2rgb","lab_xyz","lch2lab","lch2rgb","lighten","limit","log","luminance_x","m","max","multiply","normal","num2rgb","overlay","pow","rgb2cmyk","rgb2css","rgb2hcg","rgb2hex","rgb2hsi","rgb2hsl","rgb2hsv","rgb2lab","rgb2lch","rgb2luminance","rgb2num","rgb2temperature","rgb2xyz","rgb_xyz","rnd","round","screen","sin","sqrt","temperature2rgb","type","unpack","w3cx11","xyz_lab","xyz_rgb","slice","classToType","len","name","o","ref","split","length","toLowerCase","obj","strType","Object","prototype","toString","call","x","min","args","Array","rgb","i","_clipped","_unclipped","Math","arguments","func","ctor","child","result","apply","undefined","version","arg","chk","len1","me","mode","w","this","push","_rgb","sort","a","b","p","test","console","warn","hex","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","key","results","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple2","purple3","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","thistle","tomato","turquoise","wheat","whitesmoke","yellowgreen","g","l","r","y","z","isNaN","Yn","Xn","Zn","t","t1","t2","t0","Kn","t3","ref1","lab","concat","I","I0","I1","c","lab0","lab1","lab2","lab3","ref2","f","scale","cubehelix","start","rotations","hue","gamma","lightness","dh","dl","fract","amp","cos_a","h","sin_a","s","random","code","digits","charAt","col1","col2","interpol","res","alpha","mix","k","v","map","rgba","n","lrgb","xyz0","xyz1","col","xyz","average","A","cnt","dx","dy","first","xyz2","splice","get","u","match","substr","parseInt","css","channels","hxa","str","Number","NaN","hsl","q","ref3","ref4","ref5","delta","hsv","num","_c","_g","hcg","aa","ab","join","named","L","lch","hcl","reverse","cmyk","gl","luminance","lum","cur_lum","eps","max_iter","lm","kelvin","temp","maxTemp","minTemp","temperature","K","contrast","l1","l2","distance","d","sum_sq","deltaE","C","L1","L2","a1","a2","b1","b2","c1","c2","c4","dH2","delA","delB","delC","delL","h1","sc","sh","sl","v1","v2","v3","modechan","channel","src","indexOf","set","value","clipped","amount","brighten","darker","brighter","saturate","desaturate","premultiply","bottom","top","c0","out","analyze","data","val","MAX_VALUE","sum","values","count","domain","limits","positions","_classes","_colorCache","_colors","_correctLightness","_domain","_fixed","_gamma","_max","_min","_mode","_nacol","_out","_padding","_pos","_spread","_useCache","classifyValue","getClass","getColor","resetCache","setColors","tmap","maxc","minc","bypassMap","classes","_m","range","_o","spread","correctLightness","L0","L_actual","L_diff","L_ideal","pol","padding","numColors","dd","dm","samples","cache","nodata","scales","cool","hot","filter","add","visit","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","assignments","best","centroids","cluster","clusterSizes","dist","j","kClusters","max_log","min_log","mindist","nb_iters","newCentroids","pb","pr","ref10","ref11","ref12","ref13","ref14","ref6","ref7","ref8","ref9","repeat","tmpKMeansBreaks","LOG10E","acos","hsi","hue0","hue1","lbv","lbv0","lbv1","sat","sat0","sat1","n1","n2","86","_interopRequireDefault","__esModule","default","_react","_react2","_lodash","_lodash2","_chromaJs","_chromaJs2","_sectionHeader","_sectionHeader2","_token","_token2","_otkitColorsModule","_otkitColorsModule2","textColor","vsWhite","Colors","baseColors","_","pickBy","token","kebabCase","groups","relatedColors","proposedKey","tokens","toPairsIn","left","right","index","colorBlock","createElement","className","styles","style","backgroundColor","color","text","group","119","spacing-xsmall","spacing-small","spacing-medium","spacing-large","spacing-xlarge","xsmall-regular-font-size","xsmall-regular-font-weight","xsmall-regular-line-height","xsmall-medium-font-size","xsmall-medium-font-weight","xsmall-medium-line-height","border-radius-small","ash-lighter","width-main","section-color","card","main-container","color-block","color-block-border","color-name","color-hex","color-rgb"],"mappings":"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","file":"component---src-pages-otkit-colors-js-96779c1afb6cb71d4c01.js","sourcesContent":["webpackJsonp([15631302298456],{\n\n/***/ 77:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = {\n\t  greenDark: \"#194829\",\n\t  fuchsiaLight: \"#df4e96\",\n\t  aquaLightest: \"#eefcf9\",\n\t  tealLightest: \"#eef8fb\",\n\t  purpleLightest: \"#f8f0fa\",\n\t  orangeDarker: \"#441a0e\",\n\t  blueLightest: \"#eef1fc\",\n\t  blueLight: \"#6c8ae4\",\n\t  green: \"#2f864d\",\n\t  violetDark: \"#4d1fd6\",\n\t  orangeLighter: \"#e69b84\",\n\t  tealLight: \"#2b9abf\",\n\t  aquaLight: \"#1fa888\",\n\t  purpleLight: \"#bb6acd\",\n\t  fuchsiaLightest: \"#fceef5\",\n\t  tealDark: \"#154a5b\",\n\t  ashLightest: \"#f1f2f4\",\n\t  purpleDark: \"#7c2f8e\",\n\t  redLighter: \"#eea0a5\",\n\t  aquaDark: \"#0c4134\",\n\t  violetLight: \"#9d82ed\",\n\t  white: \"#ffffff\",\n\t  blueDark: \"#2146b5\",\n\t  yellowLightest: \"#fff8eb\",\n\t  yellowLighter: \"#fdc958\",\n\t  fuchsiaDark: \"#971c59\",\n\t  greenLight: \"#39a25e\",\n\t  redLightest: \"#fceeef\",\n\t  ashLighter: \"#d8d9db\",\n\t  ashDark: \"#2d333f\",\n\t  greenDarker: \"#153c23\",\n\t  fuchsiaLighter: \"#eb93bf\",\n\t  orange: \"#c84f29\",\n\t  yellowDark: \"#885e01\",\n\t  orangeLightest: \"#fcf1ee\",\n\t  blueLighter: \"#b1c1f1\",\n\t  red: \"#da3743\",\n\t  violetDarker: \"#1a0a47\",\n\t  tealLighter: \"#61bddb\",\n\t  aquaLighter: \"#3ddbb6\",\n\t  redDark: \"#931b23\",\n\t  purpleLighter: \"#d7a7e2\",\n\t  yellow: \"#d99502\",\n\t  purpleDarker: \"#36143d\",\n\t  aquaDarker: \"#09342a\",\n\t  tealDarker: \"#0f3643\",\n\t  violetLighter: \"#d5c9f7\",\n\t  orangeDark: \"#83331b\",\n\t  ash: \"#6f737b\",\n\t  blueDarker: \"#0d1b45\",\n\t  orangeLight: \"#d86441\",\n\t  fuchsia: \"#d82c82\",\n\t  fuchsiaDarker: \"#450d29\",\n\t  greenLighter: \"#64c987\",\n\t  greenLightest: \"#f0faf3\",\n\t  blue: \"#4a6fde\",\n\t  redLight: \"#e15b64\",\n\t  ashDarker: \"#141a26\",\n\t  yellowDarker: \"#513701\",\n\t  teal: \"#247f9e\",\n\t  aqua: \"#18856b\",\n\t  purple: \"#ad4cc3\",\n\t  yellowLight: \"#fdaf08\",\n\t  violetLightest: \"#f1edfc\",\n\t  violet: \"#7f5ce8\",\n\t  ashLight: \"#91949a\",\n\t  redDarker: \"#450d10\"\n\t};\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {\n\t/**\n\t * @license\n\t *\n\t * chroma.js - JavaScript library for color conversions\n\t * \n\t * Copyright (c) 2011-2017, Gregor Aisch\n\t * All rights reserved.\n\t * \n\t * Redistribution and use in source and binary forms, with or without\n\t * modification, are permitted provided that the following conditions are met:\n\t * \n\t * 1. Redistributions of source code must retain the above copyright notice, this\n\t *    list of conditions and the following disclaimer.\n\t * \n\t * 2. Redistributions in binary form must reproduce the above copyright notice,\n\t *    this list of conditions and the following disclaimer in the documentation\n\t *    and/or other materials provided with the distribution.\n\t * \n\t * 3. The name Gregor Aisch may not be used to endorse or promote products\n\t *    derived from this software without specific prior written permission.\n\t * \n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\t * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n\t * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\t * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n\t * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\t * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n\t * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t *\n\t */\n\t\n\t(function() {\n\t  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n\t    slice = [].slice;\n\t\n\t  type = (function() {\n\t\n\t    /*\n\t    for browser-safe type checking+\n\t    ported from jQuery's $.type\n\t     */\n\t    var classToType, len, name, o, ref;\n\t    classToType = {};\n\t    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n\t    for (o = 0, len = ref.length; o < len; o++) {\n\t      name = ref[o];\n\t      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t    }\n\t    return function(obj) {\n\t      var strType;\n\t      strType = Object.prototype.toString.call(obj);\n\t      return classToType[strType] || \"object\";\n\t    };\n\t  })();\n\t\n\t  limit = function(x, min, max) {\n\t    if (min == null) {\n\t      min = 0;\n\t    }\n\t    if (max == null) {\n\t      max = 1;\n\t    }\n\t    if (x < min) {\n\t      x = min;\n\t    }\n\t    if (x > max) {\n\t      x = max;\n\t    }\n\t    return x;\n\t  };\n\t\n\t  unpack = function(args) {\n\t    if (args.length >= 3) {\n\t      return Array.prototype.slice.call(args);\n\t    } else {\n\t      return args[0];\n\t    }\n\t  };\n\t\n\t  clip_rgb = function(rgb) {\n\t    var i, o;\n\t    rgb._clipped = false;\n\t    rgb._unclipped = rgb.slice(0);\n\t    for (i = o = 0; o < 3; i = ++o) {\n\t      if (i < 3) {\n\t        if (rgb[i] < 0 || rgb[i] > 255) {\n\t          rgb._clipped = true;\n\t        }\n\t        if (rgb[i] < 0) {\n\t          rgb[i] = 0;\n\t        }\n\t        if (rgb[i] > 255) {\n\t          rgb[i] = 255;\n\t        }\n\t      } else if (i === 3) {\n\t        if (rgb[i] < 0) {\n\t          rgb[i] = 0;\n\t        }\n\t        if (rgb[i] > 1) {\n\t          rgb[i] = 1;\n\t        }\n\t      }\n\t    }\n\t    if (!rgb._clipped) {\n\t      delete rgb._unclipped;\n\t    }\n\t    return rgb;\n\t  };\n\t\n\t  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\t\n\t  TWOPI = PI * 2;\n\t\n\t  PITHIRD = PI / 3;\n\t\n\t  DEG2RAD = PI / 180;\n\t\n\t  RAD2DEG = 180 / PI;\n\t\n\t  chroma = function() {\n\t    if (arguments[0] instanceof Color) {\n\t      return arguments[0];\n\t    }\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, arguments, function(){});\n\t  };\n\t\n\t  chroma[\"default\"] = chroma;\n\t\n\t  _interpolators = [];\n\t\n\t  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n\t    module.exports = chroma;\n\t  }\n\t\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return chroma;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else {\n\t    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\t    root.chroma = chroma;\n\t  }\n\t\n\t  chroma.version = '1.4.1';\n\t\n\t  _input = {};\n\t\n\t  _guess_formats = [];\n\t\n\t  _guess_formats_sorted = false;\n\t\n\t  Color = (function() {\n\t    function Color() {\n\t      var arg, args, chk, len, len1, me, mode, o, w;\n\t      me = this;\n\t      args = [];\n\t      for (o = 0, len = arguments.length; o < len; o++) {\n\t        arg = arguments[o];\n\t        if (arg != null) {\n\t          args.push(arg);\n\t        }\n\t      }\n\t      if (args.length > 1) {\n\t        mode = args[args.length - 1];\n\t      }\n\t      if (_input[mode] != null) {\n\t        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n\t      } else {\n\t        if (!_guess_formats_sorted) {\n\t          _guess_formats = _guess_formats.sort(function(a, b) {\n\t            return b.p - a.p;\n\t          });\n\t          _guess_formats_sorted = true;\n\t        }\n\t        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n\t          chk = _guess_formats[w];\n\t          mode = chk.test.apply(chk, args);\n\t          if (mode) {\n\t            break;\n\t          }\n\t        }\n\t        if (mode) {\n\t          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n\t        }\n\t      }\n\t      if (me._rgb == null) {\n\t        console.warn('unknown format: ' + args);\n\t      }\n\t      if (me._rgb == null) {\n\t        me._rgb = [0, 0, 0];\n\t      }\n\t      if (me._rgb.length === 3) {\n\t        me._rgb.push(1);\n\t      }\n\t    }\n\t\n\t    Color.prototype.toString = function() {\n\t      return this.hex();\n\t    };\n\t\n\t    return Color;\n\t\n\t  })();\n\t\n\t  chroma._input = _input;\n\t\n\t\n\t  /**\n\t  \tColorBrewer colors for chroma.js\n\t  \n\t  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n\t  \tPennsylvania State University.\n\t  \n\t  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n\t  \tyou may not use this file except in compliance with the License.\n\t  \tYou may obtain a copy of the License at\t\n\t  \thttp://www.apache.org/licenses/LICENSE-2.0\n\t  \n\t  \tUnless required by applicable law or agreed to in writing, software distributed\n\t  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n\t  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n\t  \tspecific language governing permissions and limitations under the License.\n\t  \n\t      @preserve\n\t   */\n\t\n\t  chroma.brewer = brewer = {\n\t    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n\t    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n\t    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n\t    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n\t    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n\t    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n\t    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n\t    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n\t    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n\t    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n\t    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n\t    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n\t    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n\t    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n\t    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n\t    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n\t    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n\t    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n\t    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n\t    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n\t    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n\t    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n\t    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n\t    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n\t    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n\t    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n\t    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n\t    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n\t    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n\t    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n\t    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n\t    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n\t    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n\t    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n\t    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n\t    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n\t  };\n\t\n\t  (function() {\n\t    var key, results;\n\t    results = [];\n\t    for (key in brewer) {\n\t      results.push(brewer[key.toLowerCase()] = brewer[key]);\n\t    }\n\t    return results;\n\t  })();\n\t\n\t\n\t  /**\n\t  \tX11 color names\n\t  \n\t  \thttp://www.w3.org/TR/css3-color/#svg-color\n\t   */\n\t\n\t  w3cx11 = {\n\t    aliceblue: '#f0f8ff',\n\t    antiquewhite: '#faebd7',\n\t    aqua: '#00ffff',\n\t    aquamarine: '#7fffd4',\n\t    azure: '#f0ffff',\n\t    beige: '#f5f5dc',\n\t    bisque: '#ffe4c4',\n\t    black: '#000000',\n\t    blanchedalmond: '#ffebcd',\n\t    blue: '#0000ff',\n\t    blueviolet: '#8a2be2',\n\t    brown: '#a52a2a',\n\t    burlywood: '#deb887',\n\t    cadetblue: '#5f9ea0',\n\t    chartreuse: '#7fff00',\n\t    chocolate: '#d2691e',\n\t    coral: '#ff7f50',\n\t    cornflower: '#6495ed',\n\t    cornflowerblue: '#6495ed',\n\t    cornsilk: '#fff8dc',\n\t    crimson: '#dc143c',\n\t    cyan: '#00ffff',\n\t    darkblue: '#00008b',\n\t    darkcyan: '#008b8b',\n\t    darkgoldenrod: '#b8860b',\n\t    darkgray: '#a9a9a9',\n\t    darkgreen: '#006400',\n\t    darkgrey: '#a9a9a9',\n\t    darkkhaki: '#bdb76b',\n\t    darkmagenta: '#8b008b',\n\t    darkolivegreen: '#556b2f',\n\t    darkorange: '#ff8c00',\n\t    darkorchid: '#9932cc',\n\t    darkred: '#8b0000',\n\t    darksalmon: '#e9967a',\n\t    darkseagreen: '#8fbc8f',\n\t    darkslateblue: '#483d8b',\n\t    darkslategray: '#2f4f4f',\n\t    darkslategrey: '#2f4f4f',\n\t    darkturquoise: '#00ced1',\n\t    darkviolet: '#9400d3',\n\t    deeppink: '#ff1493',\n\t    deepskyblue: '#00bfff',\n\t    dimgray: '#696969',\n\t    dimgrey: '#696969',\n\t    dodgerblue: '#1e90ff',\n\t    firebrick: '#b22222',\n\t    floralwhite: '#fffaf0',\n\t    forestgreen: '#228b22',\n\t    fuchsia: '#ff00ff',\n\t    gainsboro: '#dcdcdc',\n\t    ghostwhite: '#f8f8ff',\n\t    gold: '#ffd700',\n\t    goldenrod: '#daa520',\n\t    gray: '#808080',\n\t    green: '#008000',\n\t    greenyellow: '#adff2f',\n\t    grey: '#808080',\n\t    honeydew: '#f0fff0',\n\t    hotpink: '#ff69b4',\n\t    indianred: '#cd5c5c',\n\t    indigo: '#4b0082',\n\t    ivory: '#fffff0',\n\t    khaki: '#f0e68c',\n\t    laserlemon: '#ffff54',\n\t    lavender: '#e6e6fa',\n\t    lavenderblush: '#fff0f5',\n\t    lawngreen: '#7cfc00',\n\t    lemonchiffon: '#fffacd',\n\t    lightblue: '#add8e6',\n\t    lightcoral: '#f08080',\n\t    lightcyan: '#e0ffff',\n\t    lightgoldenrod: '#fafad2',\n\t    lightgoldenrodyellow: '#fafad2',\n\t    lightgray: '#d3d3d3',\n\t    lightgreen: '#90ee90',\n\t    lightgrey: '#d3d3d3',\n\t    lightpink: '#ffb6c1',\n\t    lightsalmon: '#ffa07a',\n\t    lightseagreen: '#20b2aa',\n\t    lightskyblue: '#87cefa',\n\t    lightslategray: '#778899',\n\t    lightslategrey: '#778899',\n\t    lightsteelblue: '#b0c4de',\n\t    lightyellow: '#ffffe0',\n\t    lime: '#00ff00',\n\t    limegreen: '#32cd32',\n\t    linen: '#faf0e6',\n\t    magenta: '#ff00ff',\n\t    maroon: '#800000',\n\t    maroon2: '#7f0000',\n\t    maroon3: '#b03060',\n\t    mediumaquamarine: '#66cdaa',\n\t    mediumblue: '#0000cd',\n\t    mediumorchid: '#ba55d3',\n\t    mediumpurple: '#9370db',\n\t    mediumseagreen: '#3cb371',\n\t    mediumslateblue: '#7b68ee',\n\t    mediumspringgreen: '#00fa9a',\n\t    mediumturquoise: '#48d1cc',\n\t    mediumvioletred: '#c71585',\n\t    midnightblue: '#191970',\n\t    mintcream: '#f5fffa',\n\t    mistyrose: '#ffe4e1',\n\t    moccasin: '#ffe4b5',\n\t    navajowhite: '#ffdead',\n\t    navy: '#000080',\n\t    oldlace: '#fdf5e6',\n\t    olive: '#808000',\n\t    olivedrab: '#6b8e23',\n\t    orange: '#ffa500',\n\t    orangered: '#ff4500',\n\t    orchid: '#da70d6',\n\t    palegoldenrod: '#eee8aa',\n\t    palegreen: '#98fb98',\n\t    paleturquoise: '#afeeee',\n\t    palevioletred: '#db7093',\n\t    papayawhip: '#ffefd5',\n\t    peachpuff: '#ffdab9',\n\t    peru: '#cd853f',\n\t    pink: '#ffc0cb',\n\t    plum: '#dda0dd',\n\t    powderblue: '#b0e0e6',\n\t    purple: '#800080',\n\t    purple2: '#7f007f',\n\t    purple3: '#a020f0',\n\t    rebeccapurple: '#663399',\n\t    red: '#ff0000',\n\t    rosybrown: '#bc8f8f',\n\t    royalblue: '#4169e1',\n\t    saddlebrown: '#8b4513',\n\t    salmon: '#fa8072',\n\t    sandybrown: '#f4a460',\n\t    seagreen: '#2e8b57',\n\t    seashell: '#fff5ee',\n\t    sienna: '#a0522d',\n\t    silver: '#c0c0c0',\n\t    skyblue: '#87ceeb',\n\t    slateblue: '#6a5acd',\n\t    slategray: '#708090',\n\t    slategrey: '#708090',\n\t    snow: '#fffafa',\n\t    springgreen: '#00ff7f',\n\t    steelblue: '#4682b4',\n\t    tan: '#d2b48c',\n\t    teal: '#008080',\n\t    thistle: '#d8bfd8',\n\t    tomato: '#ff6347',\n\t    turquoise: '#40e0d0',\n\t    violet: '#ee82ee',\n\t    wheat: '#f5deb3',\n\t    white: '#ffffff',\n\t    whitesmoke: '#f5f5f5',\n\t    yellow: '#ffff00',\n\t    yellowgreen: '#9acd32'\n\t  };\n\t\n\t  chroma.colors = colors = w3cx11;\n\t\n\t  lab2rgb = function() {\n\t    var a, args, b, g, l, r, x, y, z;\n\t    args = unpack(arguments);\n\t    l = args[0], a = args[1], b = args[2];\n\t    y = (l + 16) / 116;\n\t    x = isNaN(a) ? y : y + a / 500;\n\t    z = isNaN(b) ? y : y - b / 200;\n\t    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n\t    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n\t    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n\t    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n\t    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n\t    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n\t    return [r, g, b, args.length > 3 ? args[3] : 1];\n\t  };\n\t\n\t  xyz_rgb = function(r) {\n\t    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n\t  };\n\t\n\t  lab_xyz = function(t) {\n\t    if (t > LAB_CONSTANTS.t1) {\n\t      return t * t * t;\n\t    } else {\n\t      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n\t    }\n\t  };\n\t\n\t  LAB_CONSTANTS = {\n\t    Kn: 18,\n\t    Xn: 0.950470,\n\t    Yn: 1,\n\t    Zn: 1.088830,\n\t    t0: 0.137931034,\n\t    t1: 0.206896552,\n\t    t2: 0.12841855,\n\t    t3: 0.008856452\n\t  };\n\t\n\t  rgb2lab = function() {\n\t    var b, g, r, ref, ref1, x, y, z;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n\t    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n\t  };\n\t\n\t  rgb_xyz = function(r) {\n\t    if ((r /= 255) <= 0.04045) {\n\t      return r / 12.92;\n\t    } else {\n\t      return pow((r + 0.055) / 1.055, 2.4);\n\t    }\n\t  };\n\t\n\t  xyz_lab = function(t) {\n\t    if (t > LAB_CONSTANTS.t3) {\n\t      return pow(t, 1 / 3);\n\t    } else {\n\t      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n\t    }\n\t  };\n\t\n\t  rgb2xyz = function() {\n\t    var b, g, r, ref, x, y, z;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    r = rgb_xyz(r);\n\t    g = rgb_xyz(g);\n\t    b = rgb_xyz(b);\n\t    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n\t    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n\t    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n\t    return [x, y, z];\n\t  };\n\t\n\t  chroma.lab = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['lab']), function(){});\n\t  };\n\t\n\t  _input.lab = lab2rgb;\n\t\n\t  Color.prototype.lab = function() {\n\t    return rgb2lab(this._rgb);\n\t  };\n\t\n\t  bezier = function(colors) {\n\t    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n\t    colors = (function() {\n\t      var len, o, results;\n\t      results = [];\n\t      for (o = 0, len = colors.length; o < len; o++) {\n\t        c = colors[o];\n\t        results.push(chroma(c));\n\t      }\n\t      return results;\n\t    })();\n\t    if (colors.length === 2) {\n\t      ref = (function() {\n\t        var len, o, results;\n\t        results = [];\n\t        for (o = 0, len = colors.length; o < len; o++) {\n\t          c = colors[o];\n\t          results.push(c.lab());\n\t        }\n\t        return results;\n\t      })(), lab0 = ref[0], lab1 = ref[1];\n\t      I = function(t) {\n\t        var i, lab;\n\t        lab = (function() {\n\t          var o, results;\n\t          results = [];\n\t          for (i = o = 0; o <= 2; i = ++o) {\n\t            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n\t          }\n\t          return results;\n\t        })();\n\t        return chroma.lab.apply(chroma, lab);\n\t      };\n\t    } else if (colors.length === 3) {\n\t      ref1 = (function() {\n\t        var len, o, results;\n\t        results = [];\n\t        for (o = 0, len = colors.length; o < len; o++) {\n\t          c = colors[o];\n\t          results.push(c.lab());\n\t        }\n\t        return results;\n\t      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n\t      I = function(t) {\n\t        var i, lab;\n\t        lab = (function() {\n\t          var o, results;\n\t          results = [];\n\t          for (i = o = 0; o <= 2; i = ++o) {\n\t            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n\t          }\n\t          return results;\n\t        })();\n\t        return chroma.lab.apply(chroma, lab);\n\t      };\n\t    } else if (colors.length === 4) {\n\t      ref2 = (function() {\n\t        var len, o, results;\n\t        results = [];\n\t        for (o = 0, len = colors.length; o < len; o++) {\n\t          c = colors[o];\n\t          results.push(c.lab());\n\t        }\n\t        return results;\n\t      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n\t      I = function(t) {\n\t        var i, lab;\n\t        lab = (function() {\n\t          var o, results;\n\t          results = [];\n\t          for (i = o = 0; o <= 2; i = ++o) {\n\t            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n\t          }\n\t          return results;\n\t        })();\n\t        return chroma.lab.apply(chroma, lab);\n\t      };\n\t    } else if (colors.length === 5) {\n\t      I0 = bezier(colors.slice(0, 3));\n\t      I1 = bezier(colors.slice(2, 5));\n\t      I = function(t) {\n\t        if (t < 0.5) {\n\t          return I0(t * 2);\n\t        } else {\n\t          return I1((t - 0.5) * 2);\n\t        }\n\t      };\n\t    }\n\t    return I;\n\t  };\n\t\n\t  chroma.bezier = function(colors) {\n\t    var f;\n\t    f = bezier(colors);\n\t    f.scale = function() {\n\t      return chroma.scale(f);\n\t    };\n\t    return f;\n\t  };\n\t\n\t  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n\t    var dh, dl, f;\n\t    if (start == null) {\n\t      start = 300;\n\t    }\n\t    if (rotations == null) {\n\t      rotations = -1.5;\n\t    }\n\t    if (hue == null) {\n\t      hue = 1;\n\t    }\n\t    if (gamma == null) {\n\t      gamma = 1;\n\t    }\n\t    if (lightness == null) {\n\t      lightness = [0, 1];\n\t    }\n\t    dh = 0;\n\t    if (type(lightness) === 'array') {\n\t      dl = lightness[1] - lightness[0];\n\t    } else {\n\t      dl = 0;\n\t      lightness = [lightness, lightness];\n\t    }\n\t    f = function(fract) {\n\t      var a, amp, b, cos_a, g, h, l, r, sin_a;\n\t      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n\t      l = pow(lightness[0] + dl * fract, gamma);\n\t      h = dh !== 0 ? hue[0] + fract * dh : hue;\n\t      amp = h * l * (1 - l) / 2;\n\t      cos_a = cos(a);\n\t      sin_a = sin(a);\n\t      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n\t      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n\t      b = l + amp * (+1.97294 * cos_a);\n\t      return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n\t    };\n\t    f.start = function(s) {\n\t      if (s == null) {\n\t        return start;\n\t      }\n\t      start = s;\n\t      return f;\n\t    };\n\t    f.rotations = function(r) {\n\t      if (r == null) {\n\t        return rotations;\n\t      }\n\t      rotations = r;\n\t      return f;\n\t    };\n\t    f.gamma = function(g) {\n\t      if (g == null) {\n\t        return gamma;\n\t      }\n\t      gamma = g;\n\t      return f;\n\t    };\n\t    f.hue = function(h) {\n\t      if (h == null) {\n\t        return hue;\n\t      }\n\t      hue = h;\n\t      if (type(hue) === 'array') {\n\t        dh = hue[1] - hue[0];\n\t        if (dh === 0) {\n\t          hue = hue[1];\n\t        }\n\t      } else {\n\t        dh = 0;\n\t      }\n\t      return f;\n\t    };\n\t    f.lightness = function(h) {\n\t      if (h == null) {\n\t        return lightness;\n\t      }\n\t      if (type(h) === 'array') {\n\t        lightness = h;\n\t        dl = h[1] - h[0];\n\t      } else {\n\t        lightness = [h, h];\n\t        dl = 0;\n\t      }\n\t      return f;\n\t    };\n\t    f.scale = function() {\n\t      return chroma.scale(f);\n\t    };\n\t    f.hue(hue);\n\t    return f;\n\t  };\n\t\n\t  chroma.random = function() {\n\t    var code, digits, i, o;\n\t    digits = '0123456789abcdef';\n\t    code = '#';\n\t    for (i = o = 0; o < 6; i = ++o) {\n\t      code += digits.charAt(floor(Math.random() * 16));\n\t    }\n\t    return new Color(code);\n\t  };\n\t\n\t  _interpolators = [];\n\t\n\t  interpolate = function(col1, col2, f, m) {\n\t    var interpol, len, o, res;\n\t    if (f == null) {\n\t      f = 0.5;\n\t    }\n\t    if (m == null) {\n\t      m = 'rgb';\n\t    }\n\t\n\t    /*\n\t    interpolates between colors\n\t    f = 0 --> me\n\t    f = 1 --> col\n\t     */\n\t    if (type(col1) !== 'object') {\n\t      col1 = chroma(col1);\n\t    }\n\t    if (type(col2) !== 'object') {\n\t      col2 = chroma(col2);\n\t    }\n\t    for (o = 0, len = _interpolators.length; o < len; o++) {\n\t      interpol = _interpolators[o];\n\t      if (m === interpol[0]) {\n\t        res = interpol[1](col1, col2, f, m);\n\t        break;\n\t      }\n\t    }\n\t    if (res == null) {\n\t      throw \"color mode \" + m + \" is not supported\";\n\t    }\n\t    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n\t  };\n\t\n\t  chroma.interpolate = interpolate;\n\t\n\t  Color.prototype.interpolate = function(col2, f, m) {\n\t    return interpolate(this, col2, f, m);\n\t  };\n\t\n\t  chroma.mix = interpolate;\n\t\n\t  Color.prototype.mix = Color.prototype.interpolate;\n\t\n\t  _input.rgb = function() {\n\t    var k, ref, results, v;\n\t    ref = unpack(arguments);\n\t    results = [];\n\t    for (k in ref) {\n\t      v = ref[k];\n\t      results.push(v);\n\t    }\n\t    return results;\n\t  };\n\t\n\t  chroma.rgb = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n\t  };\n\t\n\t  Color.prototype.rgb = function(round) {\n\t    if (round == null) {\n\t      round = true;\n\t    }\n\t    if (round) {\n\t      return this._rgb.map(Math.round).slice(0, 3);\n\t    } else {\n\t      return this._rgb.slice(0, 3);\n\t    }\n\t  };\n\t\n\t  Color.prototype.rgba = function(round) {\n\t    if (round == null) {\n\t      round = true;\n\t    }\n\t    if (!round) {\n\t      return this._rgb.slice(0);\n\t    }\n\t    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n\t  };\n\t\n\t  _guess_formats.push({\n\t    p: 3,\n\t    test: function(n) {\n\t      var a;\n\t      a = unpack(arguments);\n\t      if (type(a) === 'array' && a.length === 3) {\n\t        return 'rgb';\n\t      }\n\t      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n\t        return 'rgb';\n\t      }\n\t    }\n\t  });\n\t\n\t  _input.lrgb = _input.rgb;\n\t\n\t  interpolate_lrgb = function(col1, col2, f, m) {\n\t    var xyz0, xyz1;\n\t    xyz0 = col1._rgb;\n\t    xyz1 = col2._rgb;\n\t    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n\t  };\n\t\n\t  _average_lrgb = function(colors) {\n\t    var col, f, len, o, rgb, xyz;\n\t    f = 1 / colors.length;\n\t    xyz = [0, 0, 0, 0];\n\t    for (o = 0, len = colors.length; o < len; o++) {\n\t      col = colors[o];\n\t      rgb = col._rgb;\n\t      xyz[0] += pow(rgb[0], 2) * f;\n\t      xyz[1] += pow(rgb[1], 2) * f;\n\t      xyz[2] += pow(rgb[2], 2) * f;\n\t      xyz[3] += rgb[3] * f;\n\t    }\n\t    xyz[0] = sqrt(xyz[0]);\n\t    xyz[1] = sqrt(xyz[1]);\n\t    xyz[2] = sqrt(xyz[2]);\n\t    if (xyz[3] > 1) {\n\t      xyz[3] = 1;\n\t    }\n\t    return new Color(clip_rgb(xyz));\n\t  };\n\t\n\t  _interpolators.push(['lrgb', interpolate_lrgb]);\n\t\n\t  chroma.average = function(colors, mode) {\n\t    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n\t    if (mode == null) {\n\t      mode = 'rgb';\n\t    }\n\t    l = colors.length;\n\t    colors = colors.map(function(c) {\n\t      return chroma(c);\n\t    });\n\t    first = colors.splice(0, 1)[0];\n\t    if (mode === 'lrgb') {\n\t      return _average_lrgb(colors);\n\t    }\n\t    xyz = first.get(mode);\n\t    cnt = [];\n\t    dx = 0;\n\t    dy = 0;\n\t    for (i in xyz) {\n\t      xyz[i] = xyz[i] || 0;\n\t      cnt.push(isNaN(xyz[i]) ? 0 : 1);\n\t      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n\t        A = xyz[i] / 180 * PI;\n\t        dx += cos(A);\n\t        dy += sin(A);\n\t      }\n\t    }\n\t    alpha = first.alpha();\n\t    for (o = 0, len = colors.length; o < len; o++) {\n\t      c = colors[o];\n\t      xyz2 = c.get(mode);\n\t      alpha += c.alpha();\n\t      for (i in xyz) {\n\t        if (!isNaN(xyz2[i])) {\n\t          cnt[i] += 1;\n\t          if (mode.charAt(i) === 'h') {\n\t            A = xyz2[i] / 180 * PI;\n\t            dx += cos(A);\n\t            dy += sin(A);\n\t          } else {\n\t            xyz[i] += xyz2[i];\n\t          }\n\t        }\n\t      }\n\t    }\n\t    for (i in xyz) {\n\t      if (mode.charAt(i) === 'h') {\n\t        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n\t        while (A < 0) {\n\t          A += 360;\n\t        }\n\t        while (A >= 360) {\n\t          A -= 360;\n\t        }\n\t        xyz[i] = A;\n\t      } else {\n\t        xyz[i] = xyz[i] / cnt[i];\n\t      }\n\t    }\n\t    return chroma(xyz, mode).alpha(alpha / l);\n\t  };\n\t\n\t  hex2rgb = function(hex) {\n\t    var a, b, g, r, rgb, u;\n\t    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n\t      if (hex.length === 4 || hex.length === 7) {\n\t        hex = hex.substr(1);\n\t      }\n\t      if (hex.length === 3) {\n\t        hex = hex.split(\"\");\n\t        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t      }\n\t      u = parseInt(hex, 16);\n\t      r = u >> 16;\n\t      g = u >> 8 & 0xFF;\n\t      b = u & 0xFF;\n\t      return [r, g, b, 1];\n\t    }\n\t    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n\t      if (hex.length === 9) {\n\t        hex = hex.substr(1);\n\t      }\n\t      u = parseInt(hex, 16);\n\t      r = u >> 24 & 0xFF;\n\t      g = u >> 16 & 0xFF;\n\t      b = u >> 8 & 0xFF;\n\t      a = round((u & 0xFF) / 0xFF * 100) / 100;\n\t      return [r, g, b, a];\n\t    }\n\t    if ((_input.css != null) && (rgb = _input.css(hex))) {\n\t      return rgb;\n\t    }\n\t    throw \"unknown color: \" + hex;\n\t  };\n\t\n\t  rgb2hex = function(channels, mode) {\n\t    var a, b, g, hxa, r, str, u;\n\t    if (mode == null) {\n\t      mode = 'auto';\n\t    }\n\t    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n\t    if (mode === 'auto') {\n\t      mode = a < 1 ? 'rgba' : 'rgb';\n\t    }\n\t    r = Math.round(r);\n\t    g = Math.round(g);\n\t    b = Math.round(b);\n\t    u = r << 16 | g << 8 | b;\n\t    str = \"000000\" + u.toString(16);\n\t    str = str.substr(str.length - 6);\n\t    hxa = '0' + round(a * 255).toString(16);\n\t    hxa = hxa.substr(hxa.length - 2);\n\t    return \"#\" + (function() {\n\t      switch (mode.toLowerCase()) {\n\t        case 'rgba':\n\t          return str + hxa;\n\t        case 'argb':\n\t          return hxa + str;\n\t        default:\n\t          return str;\n\t      }\n\t    })();\n\t  };\n\t\n\t  _input.hex = function(h) {\n\t    return hex2rgb(h);\n\t  };\n\t\n\t  chroma.hex = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['hex']), function(){});\n\t  };\n\t\n\t  Color.prototype.hex = function(mode) {\n\t    if (mode == null) {\n\t      mode = 'auto';\n\t    }\n\t    return rgb2hex(this._rgb, mode);\n\t  };\n\t\n\t  _guess_formats.push({\n\t    p: 4,\n\t    test: function(n) {\n\t      if (arguments.length === 1 && type(n) === \"string\") {\n\t        return 'hex';\n\t      }\n\t    }\n\t  });\n\t\n\t  hsl2rgb = function() {\n\t    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n\t    args = unpack(arguments);\n\t    h = args[0], s = args[1], l = args[2];\n\t    if (s === 0) {\n\t      r = g = b = l * 255;\n\t    } else {\n\t      t3 = [0, 0, 0];\n\t      c = [0, 0, 0];\n\t      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t      t1 = 2 * l - t2;\n\t      h /= 360;\n\t      t3[0] = h + 1 / 3;\n\t      t3[1] = h;\n\t      t3[2] = h - 1 / 3;\n\t      for (i = o = 0; o <= 2; i = ++o) {\n\t        if (t3[i] < 0) {\n\t          t3[i] += 1;\n\t        }\n\t        if (t3[i] > 1) {\n\t          t3[i] -= 1;\n\t        }\n\t        if (6 * t3[i] < 1) {\n\t          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n\t        } else if (2 * t3[i] < 1) {\n\t          c[i] = t2;\n\t        } else if (3 * t3[i] < 2) {\n\t          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n\t        } else {\n\t          c[i] = t1;\n\t        }\n\t      }\n\t      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n\t    }\n\t    if (args.length > 3) {\n\t      return [r, g, b, args[3]];\n\t    } else {\n\t      return [r, g, b];\n\t    }\n\t  };\n\t\n\t  rgb2hsl = function(r, g, b) {\n\t    var h, l, min, ref, s;\n\t    if (r !== void 0 && r.length >= 3) {\n\t      ref = r, r = ref[0], g = ref[1], b = ref[2];\n\t    }\n\t    r /= 255;\n\t    g /= 255;\n\t    b /= 255;\n\t    min = Math.min(r, g, b);\n\t    max = Math.max(r, g, b);\n\t    l = (max + min) / 2;\n\t    if (max === min) {\n\t      s = 0;\n\t      h = Number.NaN;\n\t    } else {\n\t      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n\t    }\n\t    if (r === max) {\n\t      h = (g - b) / (max - min);\n\t    } else if (g === max) {\n\t      h = 2 + (b - r) / (max - min);\n\t    } else if (b === max) {\n\t      h = 4 + (r - g) / (max - min);\n\t    }\n\t    h *= 60;\n\t    if (h < 0) {\n\t      h += 360;\n\t    }\n\t    return [h, s, l];\n\t  };\n\t\n\t  chroma.hsl = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n\t  };\n\t\n\t  _input.hsl = hsl2rgb;\n\t\n\t  Color.prototype.hsl = function() {\n\t    return rgb2hsl(this._rgb);\n\t  };\n\t\n\t  hsv2rgb = function() {\n\t    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n\t    args = unpack(arguments);\n\t    h = args[0], s = args[1], v = args[2];\n\t    v *= 255;\n\t    if (s === 0) {\n\t      r = g = b = v;\n\t    } else {\n\t      if (h === 360) {\n\t        h = 0;\n\t      }\n\t      if (h > 360) {\n\t        h -= 360;\n\t      }\n\t      if (h < 0) {\n\t        h += 360;\n\t      }\n\t      h /= 60;\n\t      i = floor(h);\n\t      f = h - i;\n\t      p = v * (1 - s);\n\t      q = v * (1 - s * f);\n\t      t = v * (1 - s * (1 - f));\n\t      switch (i) {\n\t        case 0:\n\t          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n\t          break;\n\t        case 1:\n\t          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n\t          break;\n\t        case 2:\n\t          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n\t          break;\n\t        case 3:\n\t          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n\t          break;\n\t        case 4:\n\t          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n\t          break;\n\t        case 5:\n\t          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n\t      }\n\t    }\n\t    return [r, g, b, args.length > 3 ? args[3] : 1];\n\t  };\n\t\n\t  rgb2hsv = function() {\n\t    var b, delta, g, h, min, r, ref, s, v;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    min = Math.min(r, g, b);\n\t    max = Math.max(r, g, b);\n\t    delta = max - min;\n\t    v = max / 255.0;\n\t    if (max === 0) {\n\t      h = Number.NaN;\n\t      s = 0;\n\t    } else {\n\t      s = delta / max;\n\t      if (r === max) {\n\t        h = (g - b) / delta;\n\t      }\n\t      if (g === max) {\n\t        h = 2 + (b - r) / delta;\n\t      }\n\t      if (b === max) {\n\t        h = 4 + (r - g) / delta;\n\t      }\n\t      h *= 60;\n\t      if (h < 0) {\n\t        h += 360;\n\t      }\n\t    }\n\t    return [h, s, v];\n\t  };\n\t\n\t  chroma.hsv = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n\t  };\n\t\n\t  _input.hsv = hsv2rgb;\n\t\n\t  Color.prototype.hsv = function() {\n\t    return rgb2hsv(this._rgb);\n\t  };\n\t\n\t  num2rgb = function(num) {\n\t    var b, g, r;\n\t    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n\t      r = num >> 16;\n\t      g = (num >> 8) & 0xFF;\n\t      b = num & 0xFF;\n\t      return [r, g, b, 1];\n\t    }\n\t    console.warn(\"unknown num color: \" + num);\n\t    return [0, 0, 0, 1];\n\t  };\n\t\n\t  rgb2num = function() {\n\t    var b, g, r, ref;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    return (r << 16) + (g << 8) + b;\n\t  };\n\t\n\t  chroma.num = function(num) {\n\t    return new Color(num, 'num');\n\t  };\n\t\n\t  Color.prototype.num = function(mode) {\n\t    if (mode == null) {\n\t      mode = 'rgb';\n\t    }\n\t    return rgb2num(this._rgb, mode);\n\t  };\n\t\n\t  _input.num = num2rgb;\n\t\n\t  _guess_formats.push({\n\t    p: 1,\n\t    test: function(n) {\n\t      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n\t        return 'num';\n\t      }\n\t    }\n\t  });\n\t\n\t  hcg2rgb = function() {\n\t    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n\t    args = unpack(arguments);\n\t    h = args[0], c = args[1], _g = args[2];\n\t    c = c / 100;\n\t    g = g / 100 * 255;\n\t    _c = c * 255;\n\t    if (c === 0) {\n\t      r = g = b = _g;\n\t    } else {\n\t      if (h === 360) {\n\t        h = 0;\n\t      }\n\t      if (h > 360) {\n\t        h -= 360;\n\t      }\n\t      if (h < 0) {\n\t        h += 360;\n\t      }\n\t      h /= 60;\n\t      i = floor(h);\n\t      f = h - i;\n\t      p = _g * (1 - c);\n\t      q = p + _c * (1 - f);\n\t      t = p + _c * f;\n\t      v = p + _c;\n\t      switch (i) {\n\t        case 0:\n\t          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n\t          break;\n\t        case 1:\n\t          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n\t          break;\n\t        case 2:\n\t          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n\t          break;\n\t        case 3:\n\t          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n\t          break;\n\t        case 4:\n\t          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n\t          break;\n\t        case 5:\n\t          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n\t      }\n\t    }\n\t    return [r, g, b, args.length > 3 ? args[3] : 1];\n\t  };\n\t\n\t  rgb2hcg = function() {\n\t    var _g, b, c, delta, g, h, min, r, ref;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    min = Math.min(r, g, b);\n\t    max = Math.max(r, g, b);\n\t    delta = max - min;\n\t    c = delta * 100 / 255;\n\t    _g = min / (255 - delta) * 100;\n\t    if (delta === 0) {\n\t      h = Number.NaN;\n\t    } else {\n\t      if (r === max) {\n\t        h = (g - b) / delta;\n\t      }\n\t      if (g === max) {\n\t        h = 2 + (b - r) / delta;\n\t      }\n\t      if (b === max) {\n\t        h = 4 + (r - g) / delta;\n\t      }\n\t      h *= 60;\n\t      if (h < 0) {\n\t        h += 360;\n\t      }\n\t    }\n\t    return [h, c, _g];\n\t  };\n\t\n\t  chroma.hcg = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n\t  };\n\t\n\t  _input.hcg = hcg2rgb;\n\t\n\t  Color.prototype.hcg = function() {\n\t    return rgb2hcg(this._rgb);\n\t  };\n\t\n\t  css2rgb = function(css) {\n\t    var aa, ab, hsl, i, m, o, rgb, w;\n\t    css = css.toLowerCase();\n\t    if ((chroma.colors != null) && chroma.colors[css]) {\n\t      return hex2rgb(chroma.colors[css]);\n\t    }\n\t    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n\t      rgb = m.slice(1, 4);\n\t      for (i = o = 0; o <= 2; i = ++o) {\n\t        rgb[i] = +rgb[i];\n\t      }\n\t      rgb[3] = 1;\n\t    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n\t      rgb = m.slice(1, 5);\n\t      for (i = w = 0; w <= 3; i = ++w) {\n\t        rgb[i] = +rgb[i];\n\t      }\n\t    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n\t      rgb = m.slice(1, 4);\n\t      for (i = aa = 0; aa <= 2; i = ++aa) {\n\t        rgb[i] = round(rgb[i] * 2.55);\n\t      }\n\t      rgb[3] = 1;\n\t    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n\t      rgb = m.slice(1, 5);\n\t      for (i = ab = 0; ab <= 2; i = ++ab) {\n\t        rgb[i] = round(rgb[i] * 2.55);\n\t      }\n\t      rgb[3] = +rgb[3];\n\t    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n\t      hsl = m.slice(1, 4);\n\t      hsl[1] *= 0.01;\n\t      hsl[2] *= 0.01;\n\t      rgb = hsl2rgb(hsl);\n\t      rgb[3] = 1;\n\t    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n\t      hsl = m.slice(1, 4);\n\t      hsl[1] *= 0.01;\n\t      hsl[2] *= 0.01;\n\t      rgb = hsl2rgb(hsl);\n\t      rgb[3] = +m[4];\n\t    }\n\t    return rgb;\n\t  };\n\t\n\t  rgb2css = function(rgba) {\n\t    var mode;\n\t    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n\t    if (mode === 'rgb') {\n\t      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n\t    } else if (mode === 'rgba') {\n\t      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n\t    } else {\n\t\n\t    }\n\t  };\n\t\n\t  rnd = function(a) {\n\t    return round(a * 100) / 100;\n\t  };\n\t\n\t  hsl2css = function(hsl, alpha) {\n\t    var mode;\n\t    mode = alpha < 1 ? 'hsla' : 'hsl';\n\t    hsl[0] = rnd(hsl[0] || 0);\n\t    hsl[1] = rnd(hsl[1] * 100) + '%';\n\t    hsl[2] = rnd(hsl[2] * 100) + '%';\n\t    if (mode === 'hsla') {\n\t      hsl[3] = alpha;\n\t    }\n\t    return mode + '(' + hsl.join(',') + ')';\n\t  };\n\t\n\t  _input.css = function(h) {\n\t    return css2rgb(h);\n\t  };\n\t\n\t  chroma.css = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['css']), function(){});\n\t  };\n\t\n\t  Color.prototype.css = function(mode) {\n\t    if (mode == null) {\n\t      mode = 'rgb';\n\t    }\n\t    if (mode.slice(0, 3) === 'rgb') {\n\t      return rgb2css(this._rgb);\n\t    } else if (mode.slice(0, 3) === 'hsl') {\n\t      return hsl2css(this.hsl(), this.alpha());\n\t    }\n\t  };\n\t\n\t  _input.named = function(name) {\n\t    return hex2rgb(w3cx11[name]);\n\t  };\n\t\n\t  _guess_formats.push({\n\t    p: 5,\n\t    test: function(n) {\n\t      if (arguments.length === 1 && (w3cx11[n] != null)) {\n\t        return 'named';\n\t      }\n\t    }\n\t  });\n\t\n\t  Color.prototype.name = function(n) {\n\t    var h, k;\n\t    if (arguments.length) {\n\t      if (w3cx11[n]) {\n\t        this._rgb = hex2rgb(w3cx11[n]);\n\t      }\n\t      this._rgb[3] = 1;\n\t      this;\n\t    }\n\t    h = this.hex('rgb');\n\t    for (k in w3cx11) {\n\t      if (h === w3cx11[k]) {\n\t        return k;\n\t      }\n\t    }\n\t    return h;\n\t  };\n\t\n\t  lch2lab = function() {\n\t\n\t    /*\n\t    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n\t    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n\t    out of gamut if the parameters are in the range 0-1.\n\t    \n\t    A saturation multiplier was added by Gregor Aisch\n\t     */\n\t    var c, h, l, ref;\n\t    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n\t    h = h * DEG2RAD;\n\t    return [l, cos(h) * c, sin(h) * c];\n\t  };\n\t\n\t  lch2rgb = function() {\n\t    var L, a, args, b, c, g, h, l, r, ref, ref1;\n\t    args = unpack(arguments);\n\t    l = args[0], c = args[1], h = args[2];\n\t    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n\t    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n\t    return [r, g, b, args.length > 3 ? args[3] : 1];\n\t  };\n\t\n\t  lab2lch = function() {\n\t    var a, b, c, h, l, ref;\n\t    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n\t    c = sqrt(a * a + b * b);\n\t    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n\t    if (round(c * 10000) === 0) {\n\t      h = Number.NaN;\n\t    }\n\t    return [l, c, h];\n\t  };\n\t\n\t  rgb2lch = function() {\n\t    var a, b, g, l, r, ref, ref1;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n\t    return lab2lch(l, a, b);\n\t  };\n\t\n\t  chroma.lch = function() {\n\t    var args;\n\t    args = unpack(arguments);\n\t    return new Color(args, 'lch');\n\t  };\n\t\n\t  chroma.hcl = function() {\n\t    var args;\n\t    args = unpack(arguments);\n\t    return new Color(args, 'hcl');\n\t  };\n\t\n\t  _input.lch = lch2rgb;\n\t\n\t  _input.hcl = function() {\n\t    var c, h, l, ref;\n\t    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n\t    return lch2rgb([l, c, h]);\n\t  };\n\t\n\t  Color.prototype.lch = function() {\n\t    return rgb2lch(this._rgb);\n\t  };\n\t\n\t  Color.prototype.hcl = function() {\n\t    return rgb2lch(this._rgb).reverse();\n\t  };\n\t\n\t  rgb2cmyk = function(mode) {\n\t    var b, c, f, g, k, m, r, ref, y;\n\t    if (mode == null) {\n\t      mode = 'rgb';\n\t    }\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    r = r / 255;\n\t    g = g / 255;\n\t    b = b / 255;\n\t    k = 1 - Math.max(r, Math.max(g, b));\n\t    f = k < 1 ? 1 / (1 - k) : 0;\n\t    c = (1 - r - k) * f;\n\t    m = (1 - g - k) * f;\n\t    y = (1 - b - k) * f;\n\t    return [c, m, y, k];\n\t  };\n\t\n\t  cmyk2rgb = function() {\n\t    var alpha, args, b, c, g, k, m, r, y;\n\t    args = unpack(arguments);\n\t    c = args[0], m = args[1], y = args[2], k = args[3];\n\t    alpha = args.length > 4 ? args[4] : 1;\n\t    if (k === 1) {\n\t      return [0, 0, 0, alpha];\n\t    }\n\t    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n\t    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n\t    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n\t    return [r, g, b, alpha];\n\t  };\n\t\n\t  _input.cmyk = function() {\n\t    return cmyk2rgb(unpack(arguments));\n\t  };\n\t\n\t  chroma.cmyk = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n\t  };\n\t\n\t  Color.prototype.cmyk = function() {\n\t    return rgb2cmyk(this._rgb);\n\t  };\n\t\n\t  _input.gl = function() {\n\t    var i, k, o, rgb, v;\n\t    rgb = (function() {\n\t      var ref, results;\n\t      ref = unpack(arguments);\n\t      results = [];\n\t      for (k in ref) {\n\t        v = ref[k];\n\t        results.push(v);\n\t      }\n\t      return results;\n\t    }).apply(this, arguments);\n\t    for (i = o = 0; o <= 2; i = ++o) {\n\t      rgb[i] *= 255;\n\t    }\n\t    return rgb;\n\t  };\n\t\n\t  chroma.gl = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['gl']), function(){});\n\t  };\n\t\n\t  Color.prototype.gl = function() {\n\t    var rgb;\n\t    rgb = this._rgb;\n\t    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n\t  };\n\t\n\t  rgb2luminance = function(r, g, b) {\n\t    var ref;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    r = luminance_x(r);\n\t    g = luminance_x(g);\n\t    b = luminance_x(b);\n\t    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\t  };\n\t\n\t  luminance_x = function(x) {\n\t    x /= 255;\n\t    if (x <= 0.03928) {\n\t      return x / 12.92;\n\t    } else {\n\t      return pow((x + 0.055) / 1.055, 2.4);\n\t    }\n\t  };\n\t\n\t  interpolate_rgb = function(col1, col2, f, m) {\n\t    var xyz0, xyz1;\n\t    xyz0 = col1._rgb;\n\t    xyz1 = col2._rgb;\n\t    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n\t  };\n\t\n\t  _interpolators.push(['rgb', interpolate_rgb]);\n\t\n\t  Color.prototype.luminance = function(lum, mode) {\n\t    var cur_lum, eps, max_iter, rgba, test;\n\t    if (mode == null) {\n\t      mode = 'rgb';\n\t    }\n\t    if (!arguments.length) {\n\t      return rgb2luminance(this._rgb);\n\t    }\n\t    rgba = this._rgb;\n\t    if (lum === 0) {\n\t      rgba = [0, 0, 0, this._rgb[3]];\n\t    } else if (lum === 1) {\n\t      rgba = [255, 255, 255, this[3]];\n\t    } else {\n\t      cur_lum = rgb2luminance(this._rgb);\n\t      eps = 1e-7;\n\t      max_iter = 20;\n\t      test = function(l, h) {\n\t        var lm, m;\n\t        m = l.interpolate(h, 0.5, mode);\n\t        lm = m.luminance();\n\t        if (Math.abs(lum - lm) < eps || !max_iter--) {\n\t          return m;\n\t        }\n\t        if (lm > lum) {\n\t          return test(l, m);\n\t        }\n\t        return test(m, h);\n\t      };\n\t      if (cur_lum > lum) {\n\t        rgba = test(chroma('black'), this).rgba();\n\t      } else {\n\t        rgba = test(this, chroma('white')).rgba();\n\t      }\n\t    }\n\t    return chroma(rgba).alpha(this.alpha());\n\t  };\n\t\n\t  temperature2rgb = function(kelvin) {\n\t    var b, g, r, temp;\n\t    temp = kelvin / 100;\n\t    if (temp < 66) {\n\t      r = 255;\n\t      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n\t      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n\t    } else {\n\t      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n\t      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n\t      b = 255;\n\t    }\n\t    return [r, g, b];\n\t  };\n\t\n\t  rgb2temperature = function() {\n\t    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    minTemp = 1000;\n\t    maxTemp = 40000;\n\t    eps = 0.4;\n\t    while (maxTemp - minTemp > eps) {\n\t      temp = (maxTemp + minTemp) * 0.5;\n\t      rgb = temperature2rgb(temp);\n\t      if ((rgb[2] / rgb[0]) >= (b / r)) {\n\t        maxTemp = temp;\n\t      } else {\n\t        minTemp = temp;\n\t      }\n\t    }\n\t    return round(temp);\n\t  };\n\t\n\t  chroma.temperature = chroma.kelvin = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n\t  };\n\t\n\t  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\t\n\t  Color.prototype.temperature = function() {\n\t    return rgb2temperature(this._rgb);\n\t  };\n\t\n\t  Color.prototype.kelvin = Color.prototype.temperature;\n\t\n\t  chroma.contrast = function(a, b) {\n\t    var l1, l2, ref, ref1;\n\t    if ((ref = type(a)) === 'string' || ref === 'number') {\n\t      a = new Color(a);\n\t    }\n\t    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n\t      b = new Color(b);\n\t    }\n\t    l1 = a.luminance();\n\t    l2 = b.luminance();\n\t    if (l1 > l2) {\n\t      return (l1 + 0.05) / (l2 + 0.05);\n\t    } else {\n\t      return (l2 + 0.05) / (l1 + 0.05);\n\t    }\n\t  };\n\t\n\t  chroma.distance = function(a, b, mode) {\n\t    var d, i, l1, l2, ref, ref1, sum_sq;\n\t    if (mode == null) {\n\t      mode = 'lab';\n\t    }\n\t    if ((ref = type(a)) === 'string' || ref === 'number') {\n\t      a = new Color(a);\n\t    }\n\t    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n\t      b = new Color(b);\n\t    }\n\t    l1 = a.get(mode);\n\t    l2 = b.get(mode);\n\t    sum_sq = 0;\n\t    for (i in l1) {\n\t      d = (l1[i] || 0) - (l2[i] || 0);\n\t      sum_sq += d * d;\n\t    }\n\t    return Math.sqrt(sum_sq);\n\t  };\n\t\n\t  chroma.deltaE = function(a, b, L, C) {\n\t    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n\t    if (L == null) {\n\t      L = 1;\n\t    }\n\t    if (C == null) {\n\t      C = 1;\n\t    }\n\t    if ((ref = type(a)) === 'string' || ref === 'number') {\n\t      a = new Color(a);\n\t    }\n\t    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n\t      b = new Color(b);\n\t    }\n\t    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n\t    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n\t    c1 = sqrt(a1 * a1 + b1 * b1);\n\t    c2 = sqrt(a2 * a2 + b2 * b2);\n\t    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n\t    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n\t    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n\t    while (h1 < 0) {\n\t      h1 += 360;\n\t    }\n\t    while (h1 >= 360) {\n\t      h1 -= 360;\n\t    }\n\t    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n\t    c4 = c1 * c1 * c1 * c1;\n\t    f = sqrt(c4 / (c4 + 1900.0));\n\t    sh = sc * (f * t + 1.0 - f);\n\t    delL = L1 - L2;\n\t    delC = c1 - c2;\n\t    delA = a1 - a2;\n\t    delB = b1 - b2;\n\t    dH2 = delA * delA + delB * delB - delC * delC;\n\t    v1 = delL / (L * sl);\n\t    v2 = delC / (C * sc);\n\t    v3 = sh;\n\t    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n\t  };\n\t\n\t  Color.prototype.get = function(modechan) {\n\t    var channel, i, me, mode, ref, src;\n\t    me = this;\n\t    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n\t    src = me[mode]();\n\t    if (channel) {\n\t      i = mode.indexOf(channel);\n\t      if (i > -1) {\n\t        return src[i];\n\t      } else {\n\t        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n\t      }\n\t    } else {\n\t      return src;\n\t    }\n\t  };\n\t\n\t  Color.prototype.set = function(modechan, value) {\n\t    var channel, i, me, mode, ref, src;\n\t    me = this;\n\t    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n\t    if (channel) {\n\t      src = me[mode]();\n\t      i = mode.indexOf(channel);\n\t      if (i > -1) {\n\t        if (type(value) === 'string') {\n\t          switch (value.charAt(0)) {\n\t            case '+':\n\t              src[i] += +value;\n\t              break;\n\t            case '-':\n\t              src[i] += +value;\n\t              break;\n\t            case '*':\n\t              src[i] *= +(value.substr(1));\n\t              break;\n\t            case '/':\n\t              src[i] /= +(value.substr(1));\n\t              break;\n\t            default:\n\t              src[i] = +value;\n\t          }\n\t        } else {\n\t          src[i] = value;\n\t        }\n\t      } else {\n\t        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n\t      }\n\t    } else {\n\t      src = value;\n\t    }\n\t    return chroma(src, mode).alpha(me.alpha());\n\t  };\n\t\n\t  Color.prototype.clipped = function() {\n\t    return this._rgb._clipped || false;\n\t  };\n\t\n\t  Color.prototype.alpha = function(a) {\n\t    if (arguments.length) {\n\t      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n\t    }\n\t    return this._rgb[3];\n\t  };\n\t\n\t  Color.prototype.darken = function(amount) {\n\t    var lab, me;\n\t    if (amount == null) {\n\t      amount = 1;\n\t    }\n\t    me = this;\n\t    lab = me.lab();\n\t    lab[0] -= LAB_CONSTANTS.Kn * amount;\n\t    return chroma.lab(lab).alpha(me.alpha());\n\t  };\n\t\n\t  Color.prototype.brighten = function(amount) {\n\t    if (amount == null) {\n\t      amount = 1;\n\t    }\n\t    return this.darken(-amount);\n\t  };\n\t\n\t  Color.prototype.darker = Color.prototype.darken;\n\t\n\t  Color.prototype.brighter = Color.prototype.brighten;\n\t\n\t  Color.prototype.saturate = function(amount) {\n\t    var lch, me;\n\t    if (amount == null) {\n\t      amount = 1;\n\t    }\n\t    me = this;\n\t    lch = me.lch();\n\t    lch[1] += amount * LAB_CONSTANTS.Kn;\n\t    if (lch[1] < 0) {\n\t      lch[1] = 0;\n\t    }\n\t    return chroma.lch(lch).alpha(me.alpha());\n\t  };\n\t\n\t  Color.prototype.desaturate = function(amount) {\n\t    if (amount == null) {\n\t      amount = 1;\n\t    }\n\t    return this.saturate(-amount);\n\t  };\n\t\n\t  Color.prototype.premultiply = function() {\n\t    var a, rgb;\n\t    rgb = this.rgb();\n\t    a = this.alpha();\n\t    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n\t  };\n\t\n\t  blend = function(bottom, top, mode) {\n\t    if (!blend[mode]) {\n\t      throw 'unknown blend mode ' + mode;\n\t    }\n\t    return blend[mode](bottom, top);\n\t  };\n\t\n\t  blend_f = function(f) {\n\t    return function(bottom, top) {\n\t      var c0, c1;\n\t      c0 = chroma(top).rgb();\n\t      c1 = chroma(bottom).rgb();\n\t      return chroma(f(c0, c1), 'rgb');\n\t    };\n\t  };\n\t\n\t  each = function(f) {\n\t    return function(c0, c1) {\n\t      var i, o, out;\n\t      out = [];\n\t      for (i = o = 0; o <= 3; i = ++o) {\n\t        out[i] = f(c0[i], c1[i]);\n\t      }\n\t      return out;\n\t    };\n\t  };\n\t\n\t  normal = function(a, b) {\n\t    return a;\n\t  };\n\t\n\t  multiply = function(a, b) {\n\t    return a * b / 255;\n\t  };\n\t\n\t  darken = function(a, b) {\n\t    if (a > b) {\n\t      return b;\n\t    } else {\n\t      return a;\n\t    }\n\t  };\n\t\n\t  lighten = function(a, b) {\n\t    if (a > b) {\n\t      return a;\n\t    } else {\n\t      return b;\n\t    }\n\t  };\n\t\n\t  screen = function(a, b) {\n\t    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n\t  };\n\t\n\t  overlay = function(a, b) {\n\t    if (b < 128) {\n\t      return 2 * a * b / 255;\n\t    } else {\n\t      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n\t    }\n\t  };\n\t\n\t  burn = function(a, b) {\n\t    return 255 * (1 - (1 - b / 255) / (a / 255));\n\t  };\n\t\n\t  dodge = function(a, b) {\n\t    if (a === 255) {\n\t      return 255;\n\t    }\n\t    a = 255 * (b / 255) / (1 - a / 255);\n\t    if (a > 255) {\n\t      return 255;\n\t    } else {\n\t      return a;\n\t    }\n\t  };\n\t\n\t  blend.normal = blend_f(each(normal));\n\t\n\t  blend.multiply = blend_f(each(multiply));\n\t\n\t  blend.screen = blend_f(each(screen));\n\t\n\t  blend.overlay = blend_f(each(overlay));\n\t\n\t  blend.darken = blend_f(each(darken));\n\t\n\t  blend.lighten = blend_f(each(lighten));\n\t\n\t  blend.dodge = blend_f(each(dodge));\n\t\n\t  blend.burn = blend_f(each(burn));\n\t\n\t  chroma.blend = blend;\n\t\n\t  chroma.analyze = function(data) {\n\t    var len, o, r, val;\n\t    r = {\n\t      min: Number.MAX_VALUE,\n\t      max: Number.MAX_VALUE * -1,\n\t      sum: 0,\n\t      values: [],\n\t      count: 0\n\t    };\n\t    for (o = 0, len = data.length; o < len; o++) {\n\t      val = data[o];\n\t      if ((val != null) && !isNaN(val)) {\n\t        r.values.push(val);\n\t        r.sum += val;\n\t        if (val < r.min) {\n\t          r.min = val;\n\t        }\n\t        if (val > r.max) {\n\t          r.max = val;\n\t        }\n\t        r.count += 1;\n\t      }\n\t    }\n\t    r.domain = [r.min, r.max];\n\t    r.limits = function(mode, num) {\n\t      return chroma.limits(r, mode, num);\n\t    };\n\t    return r;\n\t  };\n\t\n\t  chroma.scale = function(colors, positions) {\n\t    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n\t    _mode = 'rgb';\n\t    _nacol = chroma('#ccc');\n\t    _spread = 0;\n\t    _fixed = false;\n\t    _domain = [0, 1];\n\t    _pos = [];\n\t    _padding = [0, 0];\n\t    _classes = false;\n\t    _colors = [];\n\t    _out = false;\n\t    _min = 0;\n\t    _max = 1;\n\t    _correctLightness = false;\n\t    _colorCache = {};\n\t    _useCache = true;\n\t    _gamma = 1;\n\t    setColors = function(colors) {\n\t      var c, col, o, ref, ref1, w;\n\t      if (colors == null) {\n\t        colors = ['#fff', '#000'];\n\t      }\n\t      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n\t        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n\t      }\n\t      if (type(colors) === 'array') {\n\t        if (colors.length === 1) {\n\t          colors = [colors[0], colors[0]];\n\t        }\n\t        colors = colors.slice(0);\n\t        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n\t          col = colors[c];\n\t          if (type(col) === \"string\") {\n\t            colors[c] = chroma(col);\n\t          }\n\t        }\n\t        _pos.length = 0;\n\t        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n\t          _pos.push(c / (colors.length - 1));\n\t        }\n\t      }\n\t      resetCache();\n\t      return _colors = colors;\n\t    };\n\t    getClass = function(value) {\n\t      var i, n;\n\t      if (_classes != null) {\n\t        n = _classes.length - 1;\n\t        i = 0;\n\t        while (i < n && value >= _classes[i]) {\n\t          i++;\n\t        }\n\t        return i - 1;\n\t      }\n\t      return 0;\n\t    };\n\t    tmap = function(t) {\n\t      return t;\n\t    };\n\t    classifyValue = function(value) {\n\t      var i, maxc, minc, n, val;\n\t      val = value;\n\t      if (_classes.length > 2) {\n\t        n = _classes.length - 1;\n\t        i = getClass(value);\n\t        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n\t        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n\t        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n\t      }\n\t      return val;\n\t    };\n\t    getColor = function(val, bypassMap) {\n\t      var c, col, i, k, o, p, ref, t;\n\t      if (bypassMap == null) {\n\t        bypassMap = false;\n\t      }\n\t      if (isNaN(val) || val === null) {\n\t        return _nacol;\n\t      }\n\t      if (!bypassMap) {\n\t        if (_classes && _classes.length > 2) {\n\t          c = getClass(val);\n\t          t = c / (_classes.length - 2);\n\t        } else if (_max !== _min) {\n\t          t = (val - _min) / (_max - _min);\n\t        } else {\n\t          t = 1;\n\t        }\n\t      } else {\n\t        t = val;\n\t      }\n\t      if (!bypassMap) {\n\t        t = tmap(t);\n\t      }\n\t      if (_gamma !== 1) {\n\t        t = pow(t, _gamma);\n\t      }\n\t      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n\t      t = Math.min(1, Math.max(0, t));\n\t      k = Math.floor(t * 10000);\n\t      if (_useCache && _colorCache[k]) {\n\t        col = _colorCache[k];\n\t      } else {\n\t        if (type(_colors) === 'array') {\n\t          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n\t            p = _pos[i];\n\t            if (t <= p) {\n\t              col = _colors[i];\n\t              break;\n\t            }\n\t            if (t >= p && i === _pos.length - 1) {\n\t              col = _colors[i];\n\t              break;\n\t            }\n\t            if (t > p && t < _pos[i + 1]) {\n\t              t = (t - p) / (_pos[i + 1] - p);\n\t              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n\t              break;\n\t            }\n\t          }\n\t        } else if (type(_colors) === 'function') {\n\t          col = _colors(t);\n\t        }\n\t        if (_useCache) {\n\t          _colorCache[k] = col;\n\t        }\n\t      }\n\t      return col;\n\t    };\n\t    resetCache = function() {\n\t      return _colorCache = {};\n\t    };\n\t    setColors(colors);\n\t    f = function(v) {\n\t      var c;\n\t      c = chroma(getColor(v));\n\t      if (_out && c[_out]) {\n\t        return c[_out]();\n\t      } else {\n\t        return c;\n\t      }\n\t    };\n\t    f.classes = function(classes) {\n\t      var d;\n\t      if (classes != null) {\n\t        if (type(classes) === 'array') {\n\t          _classes = classes;\n\t          _domain = [classes[0], classes[classes.length - 1]];\n\t        } else {\n\t          d = chroma.analyze(_domain);\n\t          if (classes === 0) {\n\t            _classes = [d.min, d.max];\n\t          } else {\n\t            _classes = chroma.limits(d, 'e', classes);\n\t          }\n\t        }\n\t        return f;\n\t      }\n\t      return _classes;\n\t    };\n\t    f.domain = function(domain) {\n\t      var c, d, k, len, o, ref, w;\n\t      if (!arguments.length) {\n\t        return _domain;\n\t      }\n\t      _min = domain[0];\n\t      _max = domain[domain.length - 1];\n\t      _pos = [];\n\t      k = _colors.length;\n\t      if (domain.length === k && _min !== _max) {\n\t        for (o = 0, len = domain.length; o < len; o++) {\n\t          d = domain[o];\n\t          _pos.push((d - _min) / (_max - _min));\n\t        }\n\t      } else {\n\t        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n\t          _pos.push(c / (k - 1));\n\t        }\n\t      }\n\t      _domain = [_min, _max];\n\t      return f;\n\t    };\n\t    f.mode = function(_m) {\n\t      if (!arguments.length) {\n\t        return _mode;\n\t      }\n\t      _mode = _m;\n\t      resetCache();\n\t      return f;\n\t    };\n\t    f.range = function(colors, _pos) {\n\t      setColors(colors, _pos);\n\t      return f;\n\t    };\n\t    f.out = function(_o) {\n\t      _out = _o;\n\t      return f;\n\t    };\n\t    f.spread = function(val) {\n\t      if (!arguments.length) {\n\t        return _spread;\n\t      }\n\t      _spread = val;\n\t      return f;\n\t    };\n\t    f.correctLightness = function(v) {\n\t      if (v == null) {\n\t        v = true;\n\t      }\n\t      _correctLightness = v;\n\t      resetCache();\n\t      if (_correctLightness) {\n\t        tmap = function(t) {\n\t          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n\t          L0 = getColor(0, true).lab()[0];\n\t          L1 = getColor(1, true).lab()[0];\n\t          pol = L0 > L1;\n\t          L_actual = getColor(t, true).lab()[0];\n\t          L_ideal = L0 + (L1 - L0) * t;\n\t          L_diff = L_actual - L_ideal;\n\t          t0 = 0;\n\t          t1 = 1;\n\t          max_iter = 20;\n\t          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n\t            (function() {\n\t              if (pol) {\n\t                L_diff *= -1;\n\t              }\n\t              if (L_diff < 0) {\n\t                t0 = t;\n\t                t += (t1 - t) * 0.5;\n\t              } else {\n\t                t1 = t;\n\t                t += (t0 - t) * 0.5;\n\t              }\n\t              L_actual = getColor(t, true).lab()[0];\n\t              return L_diff = L_actual - L_ideal;\n\t            })();\n\t          }\n\t          return t;\n\t        };\n\t      } else {\n\t        tmap = function(t) {\n\t          return t;\n\t        };\n\t      }\n\t      return f;\n\t    };\n\t    f.padding = function(p) {\n\t      if (p != null) {\n\t        if (type(p) === 'number') {\n\t          p = [p, p];\n\t        }\n\t        _padding = p;\n\t        return f;\n\t      } else {\n\t        return _padding;\n\t      }\n\t    };\n\t    f.colors = function(numColors, out) {\n\t      var dd, dm, i, o, ref, result, results, samples, w;\n\t      if (arguments.length < 2) {\n\t        out = 'hex';\n\t      }\n\t      result = [];\n\t      if (arguments.length === 0) {\n\t        result = _colors.slice(0);\n\t      } else if (numColors === 1) {\n\t        result = [f(0.5)];\n\t      } else if (numColors > 1) {\n\t        dm = _domain[0];\n\t        dd = _domain[1] - dm;\n\t        result = (function() {\n\t          results = [];\n\t          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n\t          return results;\n\t        }).apply(this).map(function(i) {\n\t          return f(dm + i / (numColors - 1) * dd);\n\t        });\n\t      } else {\n\t        colors = [];\n\t        samples = [];\n\t        if (_classes && _classes.length > 2) {\n\t          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n\t            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n\t          }\n\t        } else {\n\t          samples = _domain;\n\t        }\n\t        result = samples.map(function(v) {\n\t          return f(v);\n\t        });\n\t      }\n\t      if (chroma[out]) {\n\t        result = result.map(function(c) {\n\t          return c[out]();\n\t        });\n\t      }\n\t      return result;\n\t    };\n\t    f.cache = function(c) {\n\t      if (c != null) {\n\t        _useCache = c;\n\t        return f;\n\t      } else {\n\t        return _useCache;\n\t      }\n\t    };\n\t    f.gamma = function(g) {\n\t      if (g != null) {\n\t        _gamma = g;\n\t        return f;\n\t      } else {\n\t        return _gamma;\n\t      }\n\t    };\n\t    f.nodata = function(d) {\n\t      if (d != null) {\n\t        _nacol = chroma(d);\n\t        return f;\n\t      } else {\n\t        return _nacol;\n\t      }\n\t    };\n\t    return f;\n\t  };\n\t\n\t  if (chroma.scales == null) {\n\t    chroma.scales = {};\n\t  }\n\t\n\t  chroma.scales.cool = function() {\n\t    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n\t  };\n\t\n\t  chroma.scales.hot = function() {\n\t    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n\t  };\n\t\n\t  chroma.analyze = function(data, key, filter) {\n\t    var add, k, len, o, r, val, visit;\n\t    r = {\n\t      min: Number.MAX_VALUE,\n\t      max: Number.MAX_VALUE * -1,\n\t      sum: 0,\n\t      values: [],\n\t      count: 0\n\t    };\n\t    if (filter == null) {\n\t      filter = function() {\n\t        return true;\n\t      };\n\t    }\n\t    add = function(val) {\n\t      if ((val != null) && !isNaN(val)) {\n\t        r.values.push(val);\n\t        r.sum += val;\n\t        if (val < r.min) {\n\t          r.min = val;\n\t        }\n\t        if (val > r.max) {\n\t          r.max = val;\n\t        }\n\t        r.count += 1;\n\t      }\n\t    };\n\t    visit = function(val, k) {\n\t      if (filter(val, k)) {\n\t        if ((key != null) && type(key) === 'function') {\n\t          return add(key(val));\n\t        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n\t          return add(val[key]);\n\t        } else {\n\t          return add(val);\n\t        }\n\t      }\n\t    };\n\t    if (type(data) === 'array') {\n\t      for (o = 0, len = data.length; o < len; o++) {\n\t        val = data[o];\n\t        visit(val);\n\t      }\n\t    } else {\n\t      for (k in data) {\n\t        val = data[k];\n\t        visit(val, k);\n\t      }\n\t    }\n\t    r.domain = [r.min, r.max];\n\t    r.limits = function(mode, num) {\n\t      return chroma.limits(r, mode, num);\n\t    };\n\t    return r;\n\t  };\n\t\n\t  chroma.limits = function(data, mode, num) {\n\t    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n\t    if (mode == null) {\n\t      mode = 'equal';\n\t    }\n\t    if (num == null) {\n\t      num = 7;\n\t    }\n\t    if (type(data) === 'array') {\n\t      data = chroma.analyze(data);\n\t    }\n\t    min = data.min;\n\t    max = data.max;\n\t    sum = data.sum;\n\t    values = data.values.sort(function(a, b) {\n\t      return a - b;\n\t    });\n\t    if (num === 1) {\n\t      return [min, max];\n\t    }\n\t    limits = [];\n\t    if (mode.substr(0, 1) === 'c') {\n\t      limits.push(min);\n\t      limits.push(max);\n\t    }\n\t    if (mode.substr(0, 1) === 'e') {\n\t      limits.push(min);\n\t      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n\t        limits.push(min + (i / num) * (max - min));\n\t      }\n\t      limits.push(max);\n\t    } else if (mode.substr(0, 1) === 'l') {\n\t      if (min <= 0) {\n\t        throw 'Logarithmic scales are only possible for values > 0';\n\t      }\n\t      min_log = Math.LOG10E * log(min);\n\t      max_log = Math.LOG10E * log(max);\n\t      limits.push(min);\n\t      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n\t        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n\t      }\n\t      limits.push(max);\n\t    } else if (mode.substr(0, 1) === 'q') {\n\t      limits.push(min);\n\t      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n\t        p = (values.length - 1) * i / num;\n\t        pb = floor(p);\n\t        if (pb === p) {\n\t          limits.push(values[pb]);\n\t        } else {\n\t          pr = p - pb;\n\t          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n\t        }\n\t      }\n\t      limits.push(max);\n\t    } else if (mode.substr(0, 1) === 'k') {\n\t\n\t      /*\n\t      implementation based on\n\t      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n\t      simplified for 1-d input values\n\t       */\n\t      n = values.length;\n\t      assignments = new Array(n);\n\t      clusterSizes = new Array(num);\n\t      repeat = true;\n\t      nb_iters = 0;\n\t      centroids = null;\n\t      centroids = [];\n\t      centroids.push(min);\n\t      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n\t        centroids.push(min + (i / num) * (max - min));\n\t      }\n\t      centroids.push(max);\n\t      while (repeat) {\n\t        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n\t          clusterSizes[j] = 0;\n\t        }\n\t        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n\t          value = values[i];\n\t          mindist = Number.MAX_VALUE;\n\t          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n\t            dist = abs(centroids[j] - value);\n\t            if (dist < mindist) {\n\t              mindist = dist;\n\t              best = j;\n\t            }\n\t          }\n\t          clusterSizes[best]++;\n\t          assignments[i] = best;\n\t        }\n\t        newCentroids = new Array(num);\n\t        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n\t          newCentroids[j] = null;\n\t        }\n\t        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n\t          cluster = assignments[i];\n\t          if (newCentroids[cluster] === null) {\n\t            newCentroids[cluster] = values[i];\n\t          } else {\n\t            newCentroids[cluster] += values[i];\n\t          }\n\t        }\n\t        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n\t          newCentroids[j] *= 1 / clusterSizes[j];\n\t        }\n\t        repeat = false;\n\t        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n\t          if (newCentroids[j] !== centroids[i]) {\n\t            repeat = true;\n\t            break;\n\t          }\n\t        }\n\t        centroids = newCentroids;\n\t        nb_iters++;\n\t        if (nb_iters > 200) {\n\t          repeat = false;\n\t        }\n\t      }\n\t      kClusters = {};\n\t      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n\t        kClusters[j] = [];\n\t      }\n\t      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n\t        cluster = assignments[i];\n\t        kClusters[cluster].push(values[i]);\n\t      }\n\t      tmpKMeansBreaks = [];\n\t      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n\t        tmpKMeansBreaks.push(kClusters[j][0]);\n\t        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n\t      }\n\t      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n\t        return a - b;\n\t      });\n\t      limits.push(tmpKMeansBreaks[0]);\n\t      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n\t        v = tmpKMeansBreaks[i];\n\t        if (!isNaN(v) && limits.indexOf(v) === -1) {\n\t          limits.push(v);\n\t        }\n\t      }\n\t    }\n\t    return limits;\n\t  };\n\t\n\t  hsi2rgb = function(h, s, i) {\n\t\n\t    /*\n\t    borrowed from here:\n\t    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n\t     */\n\t    var args, b, g, r;\n\t    args = unpack(arguments);\n\t    h = args[0], s = args[1], i = args[2];\n\t    if (isNaN(h)) {\n\t      h = 0;\n\t    }\n\t    h /= 360;\n\t    if (h < 1 / 3) {\n\t      b = (1 - s) / 3;\n\t      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n\t      g = 1 - (b + r);\n\t    } else if (h < 2 / 3) {\n\t      h -= 1 / 3;\n\t      r = (1 - s) / 3;\n\t      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n\t      b = 1 - (r + g);\n\t    } else {\n\t      h -= 2 / 3;\n\t      g = (1 - s) / 3;\n\t      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n\t      r = 1 - (g + b);\n\t    }\n\t    r = limit(i * r * 3);\n\t    g = limit(i * g * 3);\n\t    b = limit(i * b * 3);\n\t    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n\t  };\n\t\n\t  rgb2hsi = function() {\n\t\n\t    /*\n\t    borrowed from here:\n\t    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n\t     */\n\t    var b, g, h, i, min, r, ref, s;\n\t    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n\t    TWOPI = Math.PI * 2;\n\t    r /= 255;\n\t    g /= 255;\n\t    b /= 255;\n\t    min = Math.min(r, g, b);\n\t    i = (r + g + b) / 3;\n\t    s = 1 - min / i;\n\t    if (s === 0) {\n\t      h = 0;\n\t    } else {\n\t      h = ((r - g) + (r - b)) / 2;\n\t      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n\t      h = Math.acos(h);\n\t      if (b > g) {\n\t        h = TWOPI - h;\n\t      }\n\t      h /= TWOPI;\n\t    }\n\t    return [h * 360, s, i];\n\t  };\n\t\n\t  chroma.hsi = function() {\n\t    return (function(func, args, ctor) {\n\t      ctor.prototype = func.prototype;\n\t      var child = new ctor, result = func.apply(child, args);\n\t      return Object(result) === result ? result : child;\n\t    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n\t  };\n\t\n\t  _input.hsi = hsi2rgb;\n\t\n\t  Color.prototype.hsi = function() {\n\t    return rgb2hsi(this._rgb);\n\t  };\n\t\n\t  interpolate_hsx = function(col1, col2, f, m) {\n\t    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n\t    if (m === 'hsl') {\n\t      xyz0 = col1.hsl();\n\t      xyz1 = col2.hsl();\n\t    } else if (m === 'hsv') {\n\t      xyz0 = col1.hsv();\n\t      xyz1 = col2.hsv();\n\t    } else if (m === 'hcg') {\n\t      xyz0 = col1.hcg();\n\t      xyz1 = col2.hcg();\n\t    } else if (m === 'hsi') {\n\t      xyz0 = col1.hsi();\n\t      xyz1 = col2.hsi();\n\t    } else if (m === 'lch' || m === 'hcl') {\n\t      m = 'hcl';\n\t      xyz0 = col1.hcl();\n\t      xyz1 = col2.hcl();\n\t    }\n\t    if (m.substr(0, 1) === 'h') {\n\t      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n\t      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n\t    }\n\t    if (!isNaN(hue0) && !isNaN(hue1)) {\n\t      if (hue1 > hue0 && hue1 - hue0 > 180) {\n\t        dh = hue1 - (hue0 + 360);\n\t      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n\t        dh = hue1 + 360 - hue0;\n\t      } else {\n\t        dh = hue1 - hue0;\n\t      }\n\t      hue = hue0 + f * dh;\n\t    } else if (!isNaN(hue0)) {\n\t      hue = hue0;\n\t      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n\t        sat = sat0;\n\t      }\n\t    } else if (!isNaN(hue1)) {\n\t      hue = hue1;\n\t      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n\t        sat = sat1;\n\t      }\n\t    } else {\n\t      hue = Number.NaN;\n\t    }\n\t    if (sat == null) {\n\t      sat = sat0 + f * (sat1 - sat0);\n\t    }\n\t    lbv = lbv0 + f * (lbv1 - lbv0);\n\t    return res = chroma[m](hue, sat, lbv);\n\t  };\n\t\n\t  _interpolators = _interpolators.concat((function() {\n\t    var len, o, ref, results;\n\t    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n\t    results = [];\n\t    for (o = 0, len = ref.length; o < len; o++) {\n\t      m = ref[o];\n\t      results.push([m, interpolate_hsx]);\n\t    }\n\t    return results;\n\t  })());\n\t\n\t  interpolate_num = function(col1, col2, f, m) {\n\t    var n1, n2;\n\t    n1 = col1.num();\n\t    n2 = col2.num();\n\t    return chroma.num(n1 + (n2 - n1) * f, 'num');\n\t  };\n\t\n\t  _interpolators.push(['num', interpolate_num]);\n\t\n\t  interpolate_lab = function(col1, col2, f, m) {\n\t    var res, xyz0, xyz1;\n\t    xyz0 = col1.lab();\n\t    xyz1 = col2.lab();\n\t    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n\t  };\n\t\n\t  _interpolators.push(['lab', interpolate_lab]);\n\t\n\t}).call(this);\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(144)(module)))\n\n/***/ }),\n\n/***/ 86:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _lodash = __webpack_require__(9);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _chromaJs = __webpack_require__(94);\n\t\n\tvar _chromaJs2 = _interopRequireDefault(_chromaJs);\n\t\n\tvar _sectionHeader = __webpack_require__(8);\n\t\n\tvar _sectionHeader2 = _interopRequireDefault(_sectionHeader);\n\t\n\tvar _token = __webpack_require__(77);\n\t\n\tvar _token2 = _interopRequireDefault(_token);\n\t\n\tvar _otkitColorsModule = __webpack_require__(119);\n\t\n\tvar _otkitColorsModule2 = _interopRequireDefault(_otkitColorsModule);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// take a hex and give us a nice text color to put over it\n\tvar textColor = function textColor(hex) {\n\t  var vsWhite = _chromaJs2.default.contrast(hex, 'white');\n\t  if (vsWhite > 4) {\n\t    return '#FFF';\n\t  }\n\t  return (0, _chromaJs2.default)(hex).darken(3).hex();\n\t};\n\t\n\tvar Colors = function Colors() {\n\t  /* find all the base colors, then display their derived colors in groups,\n\t   by color. */\n\t  var baseColors = _lodash2.default.pickBy(_token2.default, function (value, key) {\n\t    return _lodash2.default.kebabCase(key).indexOf('-') == -1;\n\t  });\n\t\n\t  var groups = _lodash2.default.map(baseColors, function (value, key) {\n\t    var relatedColors = _lodash2.default.pickBy(_token2.default, function (val, proposedKey) {\n\t      return proposedKey.indexOf(key) != -1;\n\t    });\n\t\n\t    var tokens = _lodash2.default.toPairsIn(relatedColors).sort(function (left, right) {\n\t      return (0, _chromaJs2.default)(left[1]).luminance() - (0, _chromaJs2.default)(right[1]).luminance();\n\t    }).map(function (token, index) {\n\t      var rgb = token[1];\n\t      var name = token[0];\n\t\n\t      var colorBlock = _chromaJs2.default.contrast(rgb, 'white') > 4 ? 'color-block' : 'color-block-border';\n\t\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { className: _otkitColorsModule2.default['card'], key: index },\n\t        _react2.default.createElement(\n\t          'div',\n\t          {\n\t            className: _otkitColorsModule2.default[colorBlock],\n\t            style: { backgroundColor: rgb, color: textColor(rgb) }\n\t          },\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: _otkitColorsModule2.default['color-hex'] },\n\t            (0, _chromaJs2.default)(rgb).hex()\n\t          ),\n\t          _react2.default.createElement(\n\t            'div',\n\t            { className: _otkitColorsModule2.default['color-rgb'] },\n\t            rgb\n\t          )\n\t        ),\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: _otkitColorsModule2.default['color-name'] },\n\t          _lodash2.default.kebabCase(name)\n\t        )\n\t      );\n\t    });\n\t\n\t    return _react2.default.createElement(\n\t      'div',\n\t      { className: _otkitColorsModule2.default['section-color'] },\n\t      tokens\n\t    );\n\t  });\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: _otkitColorsModule2.default['main-container'] },\n\t    _react2.default.createElement(_sectionHeader2.default, { text: 'Colors', type: 'SectionHeader__small' }),\n\t    groups.map(function (group, index) {\n\t      return _react2.default.createElement(\n\t        'div',\n\t        { key: index },\n\t        group\n\t      );\n\t    })\n\t  );\n\t};\n\t\n\texports.default = Colors;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 119:\n/***/ (function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\tmodule.exports = {\"spacing-xsmall\":\"4px\",\"spacing-small\":\"8px\",\"spacing-medium\":\"16px\",\"spacing-large\":\"32px\",\"spacing-xlarge\":\"48px\",\"xsmall-regular-font-size\":\"14px\",\"xsmall-regular-font-weight\":\"normal\",\"xsmall-regular-line-height\":\"20px\",\"xsmall-medium-font-size\":\"14px\",\"xsmall-medium-font-weight\":\"500\",\"xsmall-medium-line-height\":\"20px\",\"border-radius-small\":\"4px\",\"ash-lighter\":\"#d8d9db\",\"width-main\":\"768px\",\"section-color\":\"src-styles----otkit-colors-module---section-color---20MAg\",\"card\":\"src-styles----otkit-colors-module---card---lA_pp\",\"main-container\":\"src-styles----otkit-colors-module---main-container---GVlMN\",\"color-block\":\"src-styles----otkit-colors-module---color-block---NzphN\",\"color-block-border\":\"src-styles----otkit-colors-module---color-block-border---2hGcA src-styles----otkit-colors-module---color-block---NzphN\",\"color-name\":\"src-styles----otkit-colors-module---color-name---2-obi\",\"color-hex\":\"src-styles----otkit-colors-module---color-hex---3UT0c\",\"color-rgb\":\"src-styles----otkit-colors-module---color-rgb---30n2t\"};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-otkit-colors-js-96779c1afb6cb71d4c01.js","module.exports = {\n  greenDark: \"#194829\",\n  fuchsiaLight: \"#df4e96\",\n  aquaLightest: \"#eefcf9\",\n  tealLightest: \"#eef8fb\",\n  purpleLightest: \"#f8f0fa\",\n  orangeDarker: \"#441a0e\",\n  blueLightest: \"#eef1fc\",\n  blueLight: \"#6c8ae4\",\n  green: \"#2f864d\",\n  violetDark: \"#4d1fd6\",\n  orangeLighter: \"#e69b84\",\n  tealLight: \"#2b9abf\",\n  aquaLight: \"#1fa888\",\n  purpleLight: \"#bb6acd\",\n  fuchsiaLightest: \"#fceef5\",\n  tealDark: \"#154a5b\",\n  ashLightest: \"#f1f2f4\",\n  purpleDark: \"#7c2f8e\",\n  redLighter: \"#eea0a5\",\n  aquaDark: \"#0c4134\",\n  violetLight: \"#9d82ed\",\n  white: \"#ffffff\",\n  blueDark: \"#2146b5\",\n  yellowLightest: \"#fff8eb\",\n  yellowLighter: \"#fdc958\",\n  fuchsiaDark: \"#971c59\",\n  greenLight: \"#39a25e\",\n  redLightest: \"#fceeef\",\n  ashLighter: \"#d8d9db\",\n  ashDark: \"#2d333f\",\n  greenDarker: \"#153c23\",\n  fuchsiaLighter: \"#eb93bf\",\n  orange: \"#c84f29\",\n  yellowDark: \"#885e01\",\n  orangeLightest: \"#fcf1ee\",\n  blueLighter: \"#b1c1f1\",\n  red: \"#da3743\",\n  violetDarker: \"#1a0a47\",\n  tealLighter: \"#61bddb\",\n  aquaLighter: \"#3ddbb6\",\n  redDark: \"#931b23\",\n  purpleLighter: \"#d7a7e2\",\n  yellow: \"#d99502\",\n  purpleDarker: \"#36143d\",\n  aquaDarker: \"#09342a\",\n  tealDarker: \"#0f3643\",\n  violetLighter: \"#d5c9f7\",\n  orangeDark: \"#83331b\",\n  ash: \"#6f737b\",\n  blueDarker: \"#0d1b45\",\n  orangeLight: \"#d86441\",\n  fuchsia: \"#d82c82\",\n  fuchsiaDarker: \"#450d29\",\n  greenLighter: \"#64c987\",\n  greenLightest: \"#f0faf3\",\n  blue: \"#4a6fde\",\n  redLight: \"#e15b64\",\n  ashDarker: \"#141a26\",\n  yellowDarker: \"#513701\",\n  teal: \"#247f9e\",\n  aqua: \"#18856b\",\n  purple: \"#ad4cc3\",\n  yellowLight: \"#fdaf08\",\n  violetLightest: \"#f1edfc\",\n  violet: \"#7f5ce8\",\n  ashLight: \"#91949a\",\n  redDarker: \"#450d10\",\n};\n\n\n// WEBPACK FOOTER //\n// ../OTKit/otkit-colors/token.common.js","\n/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n * \n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n(function() {\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n    slice = [].slice;\n\n  type = (function() {\n\n    /*\n    for browser-safe type checking+\n    ported from jQuery's $.type\n     */\n    var classToType, len, name, o, ref;\n    classToType = {};\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n    for (o = 0, len = ref.length; o < len; o++) {\n      name = ref[o];\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n    }\n    return function(obj) {\n      var strType;\n      strType = Object.prototype.toString.call(obj);\n      return classToType[strType] || \"object\";\n    };\n  })();\n\n  limit = function(x, min, max) {\n    if (min == null) {\n      min = 0;\n    }\n    if (max == null) {\n      max = 1;\n    }\n    if (x < min) {\n      x = min;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return x;\n  };\n\n  unpack = function(args) {\n    if (args.length >= 3) {\n      return Array.prototype.slice.call(args);\n    } else {\n      return args[0];\n    }\n  };\n\n  clip_rgb = function(rgb) {\n    var i, o;\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (i = o = 0; o < 3; i = ++o) {\n      if (i < 3) {\n        if (rgb[i] < 0 || rgb[i] > 255) {\n          rgb._clipped = true;\n        }\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 255) {\n          rgb[i] = 255;\n        }\n      } else if (i === 3) {\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 1) {\n          rgb[i] = 1;\n        }\n      }\n    }\n    if (!rgb._clipped) {\n      delete rgb._unclipped;\n    }\n    return rgb;\n  };\n\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\n  TWOPI = PI * 2;\n\n  PITHIRD = PI / 3;\n\n  DEG2RAD = PI / 180;\n\n  RAD2DEG = 180 / PI;\n\n  chroma = function() {\n    if (arguments[0] instanceof Color) {\n      return arguments[0];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, arguments, function(){});\n  };\n\n  chroma[\"default\"] = chroma;\n\n  _interpolators = [];\n\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = chroma;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return chroma;\n    });\n  } else {\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n    root.chroma = chroma;\n  }\n\n  chroma.version = '1.4.1';\n\n  _input = {};\n\n  _guess_formats = [];\n\n  _guess_formats_sorted = false;\n\n  Color = (function() {\n    function Color() {\n      var arg, args, chk, len, len1, me, mode, o, w;\n      me = this;\n      args = [];\n      for (o = 0, len = arguments.length; o < len; o++) {\n        arg = arguments[o];\n        if (arg != null) {\n          args.push(arg);\n        }\n      }\n      if (args.length > 1) {\n        mode = args[args.length - 1];\n      }\n      if (_input[mode] != null) {\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n      } else {\n        if (!_guess_formats_sorted) {\n          _guess_formats = _guess_formats.sort(function(a, b) {\n            return b.p - a.p;\n          });\n          _guess_formats_sorted = true;\n        }\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n          chk = _guess_formats[w];\n          mode = chk.test.apply(chk, args);\n          if (mode) {\n            break;\n          }\n        }\n        if (mode) {\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n        }\n      }\n      if (me._rgb == null) {\n        console.warn('unknown format: ' + args);\n      }\n      if (me._rgb == null) {\n        me._rgb = [0, 0, 0];\n      }\n      if (me._rgb.length === 3) {\n        me._rgb.push(1);\n      }\n    }\n\n    Color.prototype.toString = function() {\n      return this.hex();\n    };\n\n    return Color;\n\n  })();\n\n  chroma._input = _input;\n\n\n  /**\n  \tColorBrewer colors for chroma.js\n  \n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n  \tPennsylvania State University.\n  \n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n  \tyou may not use this file except in compliance with the License.\n  \tYou may obtain a copy of the License at\t\n  \thttp://www.apache.org/licenses/LICENSE-2.0\n  \n  \tUnless required by applicable law or agreed to in writing, software distributed\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n  \tspecific language governing permissions and limitations under the License.\n  \n      @preserve\n   */\n\n  chroma.brewer = brewer = {\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n  };\n\n  (function() {\n    var key, results;\n    results = [];\n    for (key in brewer) {\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\n    }\n    return results;\n  })();\n\n\n  /**\n  \tX11 color names\n  \n  \thttp://www.w3.org/TR/css3-color/#svg-color\n   */\n\n  w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflower: '#6495ed',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  chroma.colors = colors = w3cx11;\n\n  lab2rgb = function() {\n    var a, args, b, g, l, r, x, y, z;\n    args = unpack(arguments);\n    l = args[0], a = args[1], b = args[2];\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  xyz_rgb = function(r) {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n  };\n\n  lab_xyz = function(t) {\n    if (t > LAB_CONSTANTS.t1) {\n      return t * t * t;\n    } else {\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n    }\n  };\n\n  LAB_CONSTANTS = {\n    Kn: 18,\n    Xn: 0.950470,\n    Yn: 1,\n    Zn: 1.088830,\n    t0: 0.137931034,\n    t1: 0.206896552,\n    t2: 0.12841855,\n    t3: 0.008856452\n  };\n\n  rgb2lab = function() {\n    var b, g, r, ref, ref1, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  };\n\n  rgb_xyz = function(r) {\n    if ((r /= 255) <= 0.04045) {\n      return r / 12.92;\n    } else {\n      return pow((r + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  xyz_lab = function(t) {\n    if (t > LAB_CONSTANTS.t3) {\n      return pow(t, 1 / 3);\n    } else {\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n    }\n  };\n\n  rgb2xyz = function() {\n    var b, g, r, ref, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n    return [x, y, z];\n  };\n\n  chroma.lab = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\n  };\n\n  _input.lab = lab2rgb;\n\n  Color.prototype.lab = function() {\n    return rgb2lab(this._rgb);\n  };\n\n  bezier = function(colors) {\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n    colors = (function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = colors.length; o < len; o++) {\n        c = colors[o];\n        results.push(chroma(c));\n      }\n      return results;\n    })();\n    if (colors.length === 2) {\n      ref = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref[0], lab1 = ref[1];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 3) {\n      ref1 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 4) {\n      ref2 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 5) {\n      I0 = bezier(colors.slice(0, 3));\n      I1 = bezier(colors.slice(2, 5));\n      I = function(t) {\n        if (t < 0.5) {\n          return I0(t * 2);\n        } else {\n          return I1((t - 0.5) * 2);\n        }\n      };\n    }\n    return I;\n  };\n\n  chroma.bezier = function(colors) {\n    var f;\n    f = bezier(colors);\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    return f;\n  };\n\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n    var dh, dl, f;\n    if (start == null) {\n      start = 300;\n    }\n    if (rotations == null) {\n      rotations = -1.5;\n    }\n    if (hue == null) {\n      hue = 1;\n    }\n    if (gamma == null) {\n      gamma = 1;\n    }\n    if (lightness == null) {\n      lightness = [0, 1];\n    }\n    dh = 0;\n    if (type(lightness) === 'array') {\n      dl = lightness[1] - lightness[0];\n    } else {\n      dl = 0;\n      lightness = [lightness, lightness];\n    }\n    f = function(fract) {\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n      l = pow(lightness[0] + dl * fract, gamma);\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\n      amp = h * l * (1 - l) / 2;\n      cos_a = cos(a);\n      sin_a = sin(a);\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n      b = l + amp * (+1.97294 * cos_a);\n      return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n    };\n    f.start = function(s) {\n      if (s == null) {\n        return start;\n      }\n      start = s;\n      return f;\n    };\n    f.rotations = function(r) {\n      if (r == null) {\n        return rotations;\n      }\n      rotations = r;\n      return f;\n    };\n    f.gamma = function(g) {\n      if (g == null) {\n        return gamma;\n      }\n      gamma = g;\n      return f;\n    };\n    f.hue = function(h) {\n      if (h == null) {\n        return hue;\n      }\n      hue = h;\n      if (type(hue) === 'array') {\n        dh = hue[1] - hue[0];\n        if (dh === 0) {\n          hue = hue[1];\n        }\n      } else {\n        dh = 0;\n      }\n      return f;\n    };\n    f.lightness = function(h) {\n      if (h == null) {\n        return lightness;\n      }\n      if (type(h) === 'array') {\n        lightness = h;\n        dl = h[1] - h[0];\n      } else {\n        lightness = [h, h];\n        dl = 0;\n      }\n      return f;\n    };\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    f.hue(hue);\n    return f;\n  };\n\n  chroma.random = function() {\n    var code, digits, i, o;\n    digits = '0123456789abcdef';\n    code = '#';\n    for (i = o = 0; o < 6; i = ++o) {\n      code += digits.charAt(floor(Math.random() * 16));\n    }\n    return new Color(code);\n  };\n\n  _interpolators = [];\n\n  interpolate = function(col1, col2, f, m) {\n    var interpol, len, o, res;\n    if (f == null) {\n      f = 0.5;\n    }\n    if (m == null) {\n      m = 'rgb';\n    }\n\n    /*\n    interpolates between colors\n    f = 0 --> me\n    f = 1 --> col\n     */\n    if (type(col1) !== 'object') {\n      col1 = chroma(col1);\n    }\n    if (type(col2) !== 'object') {\n      col2 = chroma(col2);\n    }\n    for (o = 0, len = _interpolators.length; o < len; o++) {\n      interpol = _interpolators[o];\n      if (m === interpol[0]) {\n        res = interpol[1](col1, col2, f, m);\n        break;\n      }\n    }\n    if (res == null) {\n      throw \"color mode \" + m + \" is not supported\";\n    }\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n  };\n\n  chroma.interpolate = interpolate;\n\n  Color.prototype.interpolate = function(col2, f, m) {\n    return interpolate(this, col2, f, m);\n  };\n\n  chroma.mix = interpolate;\n\n  Color.prototype.mix = Color.prototype.interpolate;\n\n  _input.rgb = function() {\n    var k, ref, results, v;\n    ref = unpack(arguments);\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(v);\n    }\n    return results;\n  };\n\n  chroma.rgb = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n  };\n\n  Color.prototype.rgb = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (round) {\n      return this._rgb.map(Math.round).slice(0, 3);\n    } else {\n      return this._rgb.slice(0, 3);\n    }\n  };\n\n  Color.prototype.rgba = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (!round) {\n      return this._rgb.slice(0);\n    }\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n  };\n\n  _guess_formats.push({\n    p: 3,\n    test: function(n) {\n      var a;\n      a = unpack(arguments);\n      if (type(a) === 'array' && a.length === 3) {\n        return 'rgb';\n      }\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n        return 'rgb';\n      }\n    }\n  });\n\n  _input.lrgb = _input.rgb;\n\n  interpolate_lrgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n  };\n\n  _average_lrgb = function(colors) {\n    var col, f, len, o, rgb, xyz;\n    f = 1 / colors.length;\n    xyz = [0, 0, 0, 0];\n    for (o = 0, len = colors.length; o < len; o++) {\n      col = colors[o];\n      rgb = col._rgb;\n      xyz[0] += pow(rgb[0], 2) * f;\n      xyz[1] += pow(rgb[1], 2) * f;\n      xyz[2] += pow(rgb[2], 2) * f;\n      xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    if (xyz[3] > 1) {\n      xyz[3] = 1;\n    }\n    return new Color(clip_rgb(xyz));\n  };\n\n  _interpolators.push(['lrgb', interpolate_lrgb]);\n\n  chroma.average = function(colors, mode) {\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    l = colors.length;\n    colors = colors.map(function(c) {\n      return chroma(c);\n    });\n    first = colors.splice(0, 1)[0];\n    if (mode === 'lrgb') {\n      return _average_lrgb(colors);\n    }\n    xyz = first.get(mode);\n    cnt = [];\n    dx = 0;\n    dy = 0;\n    for (i in xyz) {\n      xyz[i] = xyz[i] || 0;\n      cnt.push(isNaN(xyz[i]) ? 0 : 1);\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n        A = xyz[i] / 180 * PI;\n        dx += cos(A);\n        dy += sin(A);\n      }\n    }\n    alpha = first.alpha();\n    for (o = 0, len = colors.length; o < len; o++) {\n      c = colors[o];\n      xyz2 = c.get(mode);\n      alpha += c.alpha();\n      for (i in xyz) {\n        if (!isNaN(xyz2[i])) {\n          cnt[i] += 1;\n          if (mode.charAt(i) === 'h') {\n            A = xyz2[i] / 180 * PI;\n            dx += cos(A);\n            dy += sin(A);\n          } else {\n            xyz[i] += xyz2[i];\n          }\n        }\n      }\n    }\n    for (i in xyz) {\n      if (mode.charAt(i) === 'h') {\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n        while (A < 0) {\n          A += 360;\n        }\n        while (A >= 360) {\n          A -= 360;\n        }\n        xyz[i] = A;\n      } else {\n        xyz[i] = xyz[i] / cnt[i];\n      }\n    }\n    return chroma(xyz, mode).alpha(alpha / l);\n  };\n\n  hex2rgb = function(hex) {\n    var a, b, g, r, rgb, u;\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n      if (hex.length === 4 || hex.length === 7) {\n        hex = hex.substr(1);\n      }\n      if (hex.length === 3) {\n        hex = hex.split(\"\");\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      u = parseInt(hex, 16);\n      r = u >> 16;\n      g = u >> 8 & 0xFF;\n      b = u & 0xFF;\n      return [r, g, b, 1];\n    }\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n      if (hex.length === 9) {\n        hex = hex.substr(1);\n      }\n      u = parseInt(hex, 16);\n      r = u >> 24 & 0xFF;\n      g = u >> 16 & 0xFF;\n      b = u >> 8 & 0xFF;\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\n      return [r, g, b, a];\n    }\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\n      return rgb;\n    }\n    throw \"unknown color: \" + hex;\n  };\n\n  rgb2hex = function(channels, mode) {\n    var a, b, g, hxa, r, str, u;\n    if (mode == null) {\n      mode = 'auto';\n    }\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n    if (mode === 'auto') {\n      mode = a < 1 ? 'rgba' : 'rgb';\n    }\n    r = Math.round(r);\n    g = Math.round(g);\n    b = Math.round(b);\n    u = r << 16 | g << 8 | b;\n    str = \"000000\" + u.toString(16);\n    str = str.substr(str.length - 6);\n    hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    return \"#\" + (function() {\n      switch (mode.toLowerCase()) {\n        case 'rgba':\n          return str + hxa;\n        case 'argb':\n          return hxa + str;\n        default:\n          return str;\n      }\n    })();\n  };\n\n  _input.hex = function(h) {\n    return hex2rgb(h);\n  };\n\n  chroma.hex = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\n  };\n\n  Color.prototype.hex = function(mode) {\n    if (mode == null) {\n      mode = 'auto';\n    }\n    return rgb2hex(this._rgb, mode);\n  };\n\n  _guess_formats.push({\n    p: 4,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"string\") {\n        return 'hex';\n      }\n    }\n  });\n\n  hsl2rgb = function() {\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n    args = unpack(arguments);\n    h = args[0], s = args[1], l = args[2];\n    if (s === 0) {\n      r = g = b = l * 255;\n    } else {\n      t3 = [0, 0, 0];\n      c = [0, 0, 0];\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      t1 = 2 * l - t2;\n      h /= 360;\n      t3[0] = h + 1 / 3;\n      t3[1] = h;\n      t3[2] = h - 1 / 3;\n      for (i = o = 0; o <= 2; i = ++o) {\n        if (t3[i] < 0) {\n          t3[i] += 1;\n        }\n        if (t3[i] > 1) {\n          t3[i] -= 1;\n        }\n        if (6 * t3[i] < 1) {\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n        } else if (2 * t3[i] < 1) {\n          c[i] = t2;\n        } else if (3 * t3[i] < 2) {\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n        } else {\n          c[i] = t1;\n        }\n      }\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n    }\n    if (args.length > 3) {\n      return [r, g, b, args[3]];\n    } else {\n      return [r, g, b];\n    }\n  };\n\n  rgb2hsl = function(r, g, b) {\n    var h, l, min, ref, s;\n    if (r !== void 0 && r.length >= 3) {\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    l = (max + min) / 2;\n    if (max === min) {\n      s = 0;\n      h = Number.NaN;\n    } else {\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n    }\n    if (r === max) {\n      h = (g - b) / (max - min);\n    } else if (g === max) {\n      h = 2 + (b - r) / (max - min);\n    } else if (b === max) {\n      h = 4 + (r - g) / (max - min);\n    }\n    h *= 60;\n    if (h < 0) {\n      h += 360;\n    }\n    return [h, s, l];\n  };\n\n  chroma.hsl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n  };\n\n  _input.hsl = hsl2rgb;\n\n  Color.prototype.hsl = function() {\n    return rgb2hsl(this._rgb);\n  };\n\n  hsv2rgb = function() {\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n    args = unpack(arguments);\n    h = args[0], s = args[1], v = args[2];\n    v *= 255;\n    if (s === 0) {\n      r = g = b = v;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsv = function() {\n    var b, delta, g, h, min, r, ref, s, v;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    v = max / 255.0;\n    if (max === 0) {\n      h = Number.NaN;\n      s = 0;\n    } else {\n      s = delta / max;\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, s, v];\n  };\n\n  chroma.hsv = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n  };\n\n  _input.hsv = hsv2rgb;\n\n  Color.prototype.hsv = function() {\n    return rgb2hsv(this._rgb);\n  };\n\n  num2rgb = function(num) {\n    var b, g, r;\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n      r = num >> 16;\n      g = (num >> 8) & 0xFF;\n      b = num & 0xFF;\n      return [r, g, b, 1];\n    }\n    console.warn(\"unknown num color: \" + num);\n    return [0, 0, 0, 1];\n  };\n\n  rgb2num = function() {\n    var b, g, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    return (r << 16) + (g << 8) + b;\n  };\n\n  chroma.num = function(num) {\n    return new Color(num, 'num');\n  };\n\n  Color.prototype.num = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2num(this._rgb, mode);\n  };\n\n  _input.num = num2rgb;\n\n  _guess_formats.push({\n    p: 1,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n        return 'num';\n      }\n    }\n  });\n\n  hcg2rgb = function() {\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n    args = unpack(arguments);\n    h = args[0], c = args[1], _g = args[2];\n    c = c / 100;\n    g = g / 100 * 255;\n    _c = c * 255;\n    if (c === 0) {\n      r = g = b = _g;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = _g * (1 - c);\n      q = p + _c * (1 - f);\n      t = p + _c * f;\n      v = p + _c;\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hcg = function() {\n    var _g, b, c, delta, g, h, min, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    c = delta * 100 / 255;\n    _g = min / (255 - delta) * 100;\n    if (delta === 0) {\n      h = Number.NaN;\n    } else {\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, c, _g];\n  };\n\n  chroma.hcg = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n  };\n\n  _input.hcg = hcg2rgb;\n\n  Color.prototype.hcg = function() {\n    return rgb2hcg(this._rgb);\n  };\n\n  css2rgb = function(css) {\n    var aa, ab, hsl, i, m, o, rgb, w;\n    css = css.toLowerCase();\n    if ((chroma.colors != null) && chroma.colors[css]) {\n      return hex2rgb(chroma.colors[css]);\n    }\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = o = 0; o <= 2; i = ++o) {\n        rgb[i] = +rgb[i];\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = w = 0; w <= 3; i = ++w) {\n        rgb[i] = +rgb[i];\n      }\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = aa = 0; aa <= 2; i = ++aa) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = ab = 0; ab <= 2; i = ++ab) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = +rgb[3];\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = 1;\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = +m[4];\n    }\n    return rgb;\n  };\n\n  rgb2css = function(rgba) {\n    var mode;\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n    if (mode === 'rgb') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n    } else if (mode === 'rgba') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n    } else {\n\n    }\n  };\n\n  rnd = function(a) {\n    return round(a * 100) / 100;\n  };\n\n  hsl2css = function(hsl, alpha) {\n    var mode;\n    mode = alpha < 1 ? 'hsla' : 'hsl';\n    hsl[0] = rnd(hsl[0] || 0);\n    hsl[1] = rnd(hsl[1] * 100) + '%';\n    hsl[2] = rnd(hsl[2] * 100) + '%';\n    if (mode === 'hsla') {\n      hsl[3] = alpha;\n    }\n    return mode + '(' + hsl.join(',') + ')';\n  };\n\n  _input.css = function(h) {\n    return css2rgb(h);\n  };\n\n  chroma.css = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['css']), function(){});\n  };\n\n  Color.prototype.css = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (mode.slice(0, 3) === 'rgb') {\n      return rgb2css(this._rgb);\n    } else if (mode.slice(0, 3) === 'hsl') {\n      return hsl2css(this.hsl(), this.alpha());\n    }\n  };\n\n  _input.named = function(name) {\n    return hex2rgb(w3cx11[name]);\n  };\n\n  _guess_formats.push({\n    p: 5,\n    test: function(n) {\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\n        return 'named';\n      }\n    }\n  });\n\n  Color.prototype.name = function(n) {\n    var h, k;\n    if (arguments.length) {\n      if (w3cx11[n]) {\n        this._rgb = hex2rgb(w3cx11[n]);\n      }\n      this._rgb[3] = 1;\n      this;\n    }\n    h = this.hex('rgb');\n    for (k in w3cx11) {\n      if (h === w3cx11[k]) {\n        return k;\n      }\n    }\n    return h;\n  };\n\n  lch2lab = function() {\n\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n    \n    A saturation multiplier was added by Gregor Aisch\n     */\n    var c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n  };\n\n  lch2rgb = function() {\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\n    args = unpack(arguments);\n    l = args[0], c = args[1], h = args[2];\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  lab2lch = function() {\n    var a, b, c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n    c = sqrt(a * a + b * b);\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) {\n      h = Number.NaN;\n    }\n    return [l, c, h];\n  };\n\n  rgb2lch = function() {\n    var a, b, g, l, r, ref, ref1;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n    return lab2lch(l, a, b);\n  };\n\n  chroma.lch = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'lch');\n  };\n\n  chroma.hcl = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'hcl');\n  };\n\n  _input.lch = lch2rgb;\n\n  _input.hcl = function() {\n    var c, h, l, ref;\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n    return lch2rgb([l, c, h]);\n  };\n\n  Color.prototype.lch = function() {\n    return rgb2lch(this._rgb);\n  };\n\n  Color.prototype.hcl = function() {\n    return rgb2lch(this._rgb).reverse();\n  };\n\n  rgb2cmyk = function(mode) {\n    var b, c, f, g, k, m, r, ref, y;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    k = 1 - Math.max(r, Math.max(g, b));\n    f = k < 1 ? 1 / (1 - k) : 0;\n    c = (1 - r - k) * f;\n    m = (1 - g - k) * f;\n    y = (1 - b - k) * f;\n    return [c, m, y, k];\n  };\n\n  cmyk2rgb = function() {\n    var alpha, args, b, c, g, k, m, r, y;\n    args = unpack(arguments);\n    c = args[0], m = args[1], y = args[2], k = args[3];\n    alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) {\n      return [0, 0, 0, alpha];\n    }\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n    return [r, g, b, alpha];\n  };\n\n  _input.cmyk = function() {\n    return cmyk2rgb(unpack(arguments));\n  };\n\n  chroma.cmyk = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n  };\n\n  Color.prototype.cmyk = function() {\n    return rgb2cmyk(this._rgb);\n  };\n\n  _input.gl = function() {\n    var i, k, o, rgb, v;\n    rgb = (function() {\n      var ref, results;\n      ref = unpack(arguments);\n      results = [];\n      for (k in ref) {\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    }).apply(this, arguments);\n    for (i = o = 0; o <= 2; i = ++o) {\n      rgb[i] *= 255;\n    }\n    return rgb;\n  };\n\n  chroma.gl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\n  };\n\n  Color.prototype.gl = function() {\n    var rgb;\n    rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n  };\n\n  rgb2luminance = function(r, g, b) {\n    var ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  luminance_x = function(x) {\n    x /= 255;\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return pow((x + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  interpolate_rgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['rgb', interpolate_rgb]);\n\n  Color.prototype.luminance = function(lum, mode) {\n    var cur_lum, eps, max_iter, rgba, test;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (!arguments.length) {\n      return rgb2luminance(this._rgb);\n    }\n    rgba = this._rgb;\n    if (lum === 0) {\n      rgba = [0, 0, 0, this._rgb[3]];\n    } else if (lum === 1) {\n      rgba = [255, 255, 255, this[3]];\n    } else {\n      cur_lum = rgb2luminance(this._rgb);\n      eps = 1e-7;\n      max_iter = 20;\n      test = function(l, h) {\n        var lm, m;\n        m = l.interpolate(h, 0.5, mode);\n        lm = m.luminance();\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\n          return m;\n        }\n        if (lm > lum) {\n          return test(l, m);\n        }\n        return test(m, h);\n      };\n      if (cur_lum > lum) {\n        rgba = test(chroma('black'), this).rgba();\n      } else {\n        rgba = test(this, chroma('white')).rgba();\n      }\n    }\n    return chroma(rgba).alpha(this.alpha());\n  };\n\n  temperature2rgb = function(kelvin) {\n    var b, g, r, temp;\n    temp = kelvin / 100;\n    if (temp < 66) {\n      r = 255;\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n      b = 255;\n    }\n    return [r, g, b];\n  };\n\n  rgb2temperature = function() {\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    minTemp = 1000;\n    maxTemp = 40000;\n    eps = 0.4;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      rgb = temperature2rgb(temp);\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return round(temp);\n  };\n\n  chroma.temperature = chroma.kelvin = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n  };\n\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\n  Color.prototype.temperature = function() {\n    return rgb2temperature(this._rgb);\n  };\n\n  Color.prototype.kelvin = Color.prototype.temperature;\n\n  chroma.contrast = function(a, b) {\n    var l1, l2, ref, ref1;\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.luminance();\n    l2 = b.luminance();\n    if (l1 > l2) {\n      return (l1 + 0.05) / (l2 + 0.05);\n    } else {\n      return (l2 + 0.05) / (l1 + 0.05);\n    }\n  };\n\n  chroma.distance = function(a, b, mode) {\n    var d, i, l1, l2, ref, ref1, sum_sq;\n    if (mode == null) {\n      mode = 'lab';\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.get(mode);\n    l2 = b.get(mode);\n    sum_sq = 0;\n    for (i in l1) {\n      d = (l1[i] || 0) - (l2[i] || 0);\n      sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n  };\n\n  chroma.deltaE = function(a, b, L, C) {\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n    if (L == null) {\n      L = 1;\n    }\n    if (C == null) {\n      C = 1;\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n    c1 = sqrt(a1 * a1 + b1 * b1);\n    c2 = sqrt(a2 * a2 + b2 * b2);\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n    while (h1 < 0) {\n      h1 += 360;\n    }\n    while (h1 >= 360) {\n      h1 -= 360;\n    }\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n    c4 = c1 * c1 * c1 * c1;\n    f = sqrt(c4 / (c4 + 1900.0));\n    sh = sc * (f * t + 1.0 - f);\n    delL = L1 - L2;\n    delC = c1 - c2;\n    delA = a1 - a2;\n    delB = b1 - b2;\n    dH2 = delA * delA + delB * delB - delC * delC;\n    v1 = delL / (L * sl);\n    v2 = delC / (C * sc);\n    v3 = sh;\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n  };\n\n  Color.prototype.get = function(modechan) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    src = me[mode]();\n    if (channel) {\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        return src[i];\n      } else {\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      return src;\n    }\n  };\n\n  Color.prototype.set = function(modechan, value) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    if (channel) {\n      src = me[mode]();\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        if (type(value) === 'string') {\n          switch (value.charAt(0)) {\n            case '+':\n              src[i] += +value;\n              break;\n            case '-':\n              src[i] += +value;\n              break;\n            case '*':\n              src[i] *= +(value.substr(1));\n              break;\n            case '/':\n              src[i] /= +(value.substr(1));\n              break;\n            default:\n              src[i] = +value;\n          }\n        } else {\n          src[i] = value;\n        }\n      } else {\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      src = value;\n    }\n    return chroma(src, mode).alpha(me.alpha());\n  };\n\n  Color.prototype.clipped = function() {\n    return this._rgb._clipped || false;\n  };\n\n  Color.prototype.alpha = function(a) {\n    if (arguments.length) {\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n    }\n    return this._rgb[3];\n  };\n\n  Color.prototype.darken = function(amount) {\n    var lab, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return chroma.lab(lab).alpha(me.alpha());\n  };\n\n  Color.prototype.brighten = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.darken(-amount);\n  };\n\n  Color.prototype.darker = Color.prototype.darken;\n\n  Color.prototype.brighter = Color.prototype.brighten;\n\n  Color.prototype.saturate = function(amount) {\n    var lch, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lch = me.lch();\n    lch[1] += amount * LAB_CONSTANTS.Kn;\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n    return chroma.lch(lch).alpha(me.alpha());\n  };\n\n  Color.prototype.desaturate = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.saturate(-amount);\n  };\n\n  Color.prototype.premultiply = function() {\n    var a, rgb;\n    rgb = this.rgb();\n    a = this.alpha();\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n  };\n\n  blend = function(bottom, top, mode) {\n    if (!blend[mode]) {\n      throw 'unknown blend mode ' + mode;\n    }\n    return blend[mode](bottom, top);\n  };\n\n  blend_f = function(f) {\n    return function(bottom, top) {\n      var c0, c1;\n      c0 = chroma(top).rgb();\n      c1 = chroma(bottom).rgb();\n      return chroma(f(c0, c1), 'rgb');\n    };\n  };\n\n  each = function(f) {\n    return function(c0, c1) {\n      var i, o, out;\n      out = [];\n      for (i = o = 0; o <= 3; i = ++o) {\n        out[i] = f(c0[i], c1[i]);\n      }\n      return out;\n    };\n  };\n\n  normal = function(a, b) {\n    return a;\n  };\n\n  multiply = function(a, b) {\n    return a * b / 255;\n  };\n\n  darken = function(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  };\n\n  lighten = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  screen = function(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  };\n\n  overlay = function(a, b) {\n    if (b < 128) {\n      return 2 * a * b / 255;\n    } else {\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n    }\n  };\n\n  burn = function(a, b) {\n    return 255 * (1 - (1 - b / 255) / (a / 255));\n  };\n\n  dodge = function(a, b) {\n    if (a === 255) {\n      return 255;\n    }\n    a = 255 * (b / 255) / (1 - a / 255);\n    if (a > 255) {\n      return 255;\n    } else {\n      return a;\n    }\n  };\n\n  blend.normal = blend_f(each(normal));\n\n  blend.multiply = blend_f(each(multiply));\n\n  blend.screen = blend_f(each(screen));\n\n  blend.overlay = blend_f(each(overlay));\n\n  blend.darken = blend_f(each(darken));\n\n  blend.lighten = blend_f(each(lighten));\n\n  blend.dodge = blend_f(each(dodge));\n\n  blend.burn = blend_f(each(burn));\n\n  chroma.blend = blend;\n\n  chroma.analyze = function(data) {\n    var len, o, r, val;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    for (o = 0, len = data.length; o < len; o++) {\n      val = data[o];\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.scale = function(colors, positions) {\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n    _mode = 'rgb';\n    _nacol = chroma('#ccc');\n    _spread = 0;\n    _fixed = false;\n    _domain = [0, 1];\n    _pos = [];\n    _padding = [0, 0];\n    _classes = false;\n    _colors = [];\n    _out = false;\n    _min = 0;\n    _max = 1;\n    _correctLightness = false;\n    _colorCache = {};\n    _useCache = true;\n    _gamma = 1;\n    setColors = function(colors) {\n      var c, col, o, ref, ref1, w;\n      if (colors == null) {\n        colors = ['#fff', '#000'];\n      }\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n      }\n      if (type(colors) === 'array') {\n        if (colors.length === 1) {\n          colors = [colors[0], colors[0]];\n        }\n        colors = colors.slice(0);\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n          col = colors[c];\n          if (type(col) === \"string\") {\n            colors[c] = chroma(col);\n          }\n        }\n        _pos.length = 0;\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n          _pos.push(c / (colors.length - 1));\n        }\n      }\n      resetCache();\n      return _colors = colors;\n    };\n    getClass = function(value) {\n      var i, n;\n      if (_classes != null) {\n        n = _classes.length - 1;\n        i = 0;\n        while (i < n && value >= _classes[i]) {\n          i++;\n        }\n        return i - 1;\n      }\n      return 0;\n    };\n    tmap = function(t) {\n      return t;\n    };\n    classifyValue = function(value) {\n      var i, maxc, minc, n, val;\n      val = value;\n      if (_classes.length > 2) {\n        n = _classes.length - 1;\n        i = getClass(value);\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n      }\n      return val;\n    };\n    getColor = function(val, bypassMap) {\n      var c, col, i, k, o, p, ref, t;\n      if (bypassMap == null) {\n        bypassMap = false;\n      }\n      if (isNaN(val) || val === null) {\n        return _nacol;\n      }\n      if (!bypassMap) {\n        if (_classes && _classes.length > 2) {\n          c = getClass(val);\n          t = c / (_classes.length - 2);\n        } else if (_max !== _min) {\n          t = (val - _min) / (_max - _min);\n        } else {\n          t = 1;\n        }\n      } else {\n        t = val;\n      }\n      if (!bypassMap) {\n        t = tmap(t);\n      }\n      if (_gamma !== 1) {\n        t = pow(t, _gamma);\n      }\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n      t = Math.min(1, Math.max(0, t));\n      k = Math.floor(t * 10000);\n      if (_useCache && _colorCache[k]) {\n        col = _colorCache[k];\n      } else {\n        if (type(_colors) === 'array') {\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            p = _pos[i];\n            if (t <= p) {\n              col = _colors[i];\n              break;\n            }\n            if (t >= p && i === _pos.length - 1) {\n              col = _colors[i];\n              break;\n            }\n            if (t > p && t < _pos[i + 1]) {\n              t = (t - p) / (_pos[i + 1] - p);\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n              break;\n            }\n          }\n        } else if (type(_colors) === 'function') {\n          col = _colors(t);\n        }\n        if (_useCache) {\n          _colorCache[k] = col;\n        }\n      }\n      return col;\n    };\n    resetCache = function() {\n      return _colorCache = {};\n    };\n    setColors(colors);\n    f = function(v) {\n      var c;\n      c = chroma(getColor(v));\n      if (_out && c[_out]) {\n        return c[_out]();\n      } else {\n        return c;\n      }\n    };\n    f.classes = function(classes) {\n      var d;\n      if (classes != null) {\n        if (type(classes) === 'array') {\n          _classes = classes;\n          _domain = [classes[0], classes[classes.length - 1]];\n        } else {\n          d = chroma.analyze(_domain);\n          if (classes === 0) {\n            _classes = [d.min, d.max];\n          } else {\n            _classes = chroma.limits(d, 'e', classes);\n          }\n        }\n        return f;\n      }\n      return _classes;\n    };\n    f.domain = function(domain) {\n      var c, d, k, len, o, ref, w;\n      if (!arguments.length) {\n        return _domain;\n      }\n      _min = domain[0];\n      _max = domain[domain.length - 1];\n      _pos = [];\n      k = _colors.length;\n      if (domain.length === k && _min !== _max) {\n        for (o = 0, len = domain.length; o < len; o++) {\n          d = domain[o];\n          _pos.push((d - _min) / (_max - _min));\n        }\n      } else {\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n          _pos.push(c / (k - 1));\n        }\n      }\n      _domain = [_min, _max];\n      return f;\n    };\n    f.mode = function(_m) {\n      if (!arguments.length) {\n        return _mode;\n      }\n      _mode = _m;\n      resetCache();\n      return f;\n    };\n    f.range = function(colors, _pos) {\n      setColors(colors, _pos);\n      return f;\n    };\n    f.out = function(_o) {\n      _out = _o;\n      return f;\n    };\n    f.spread = function(val) {\n      if (!arguments.length) {\n        return _spread;\n      }\n      _spread = val;\n      return f;\n    };\n    f.correctLightness = function(v) {\n      if (v == null) {\n        v = true;\n      }\n      _correctLightness = v;\n      resetCache();\n      if (_correctLightness) {\n        tmap = function(t) {\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n          L0 = getColor(0, true).lab()[0];\n          L1 = getColor(1, true).lab()[0];\n          pol = L0 > L1;\n          L_actual = getColor(t, true).lab()[0];\n          L_ideal = L0 + (L1 - L0) * t;\n          L_diff = L_actual - L_ideal;\n          t0 = 0;\n          t1 = 1;\n          max_iter = 20;\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n            (function() {\n              if (pol) {\n                L_diff *= -1;\n              }\n              if (L_diff < 0) {\n                t0 = t;\n                t += (t1 - t) * 0.5;\n              } else {\n                t1 = t;\n                t += (t0 - t) * 0.5;\n              }\n              L_actual = getColor(t, true).lab()[0];\n              return L_diff = L_actual - L_ideal;\n            })();\n          }\n          return t;\n        };\n      } else {\n        tmap = function(t) {\n          return t;\n        };\n      }\n      return f;\n    };\n    f.padding = function(p) {\n      if (p != null) {\n        if (type(p) === 'number') {\n          p = [p, p];\n        }\n        _padding = p;\n        return f;\n      } else {\n        return _padding;\n      }\n    };\n    f.colors = function(numColors, out) {\n      var dd, dm, i, o, ref, result, results, samples, w;\n      if (arguments.length < 2) {\n        out = 'hex';\n      }\n      result = [];\n      if (arguments.length === 0) {\n        result = _colors.slice(0);\n      } else if (numColors === 1) {\n        result = [f(0.5)];\n      } else if (numColors > 1) {\n        dm = _domain[0];\n        dd = _domain[1] - dm;\n        result = (function() {\n          results = [];\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n          return results;\n        }).apply(this).map(function(i) {\n          return f(dm + i / (numColors - 1) * dd);\n        });\n      } else {\n        colors = [];\n        samples = [];\n        if (_classes && _classes.length > 2) {\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n          }\n        } else {\n          samples = _domain;\n        }\n        result = samples.map(function(v) {\n          return f(v);\n        });\n      }\n      if (chroma[out]) {\n        result = result.map(function(c) {\n          return c[out]();\n        });\n      }\n      return result;\n    };\n    f.cache = function(c) {\n      if (c != null) {\n        _useCache = c;\n        return f;\n      } else {\n        return _useCache;\n      }\n    };\n    f.gamma = function(g) {\n      if (g != null) {\n        _gamma = g;\n        return f;\n      } else {\n        return _gamma;\n      }\n    };\n    f.nodata = function(d) {\n      if (d != null) {\n        _nacol = chroma(d);\n        return f;\n      } else {\n        return _nacol;\n      }\n    };\n    return f;\n  };\n\n  if (chroma.scales == null) {\n    chroma.scales = {};\n  }\n\n  chroma.scales.cool = function() {\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n  };\n\n  chroma.scales.hot = function() {\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n  };\n\n  chroma.analyze = function(data, key, filter) {\n    var add, k, len, o, r, val, visit;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    if (filter == null) {\n      filter = function() {\n        return true;\n      };\n    }\n    add = function(val) {\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    };\n    visit = function(val, k) {\n      if (filter(val, k)) {\n        if ((key != null) && type(key) === 'function') {\n          return add(key(val));\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n          return add(val[key]);\n        } else {\n          return add(val);\n        }\n      }\n    };\n    if (type(data) === 'array') {\n      for (o = 0, len = data.length; o < len; o++) {\n        val = data[o];\n        visit(val);\n      }\n    } else {\n      for (k in data) {\n        val = data[k];\n        visit(val, k);\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.limits = function(data, mode, num) {\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n    if (mode == null) {\n      mode = 'equal';\n    }\n    if (num == null) {\n      num = 7;\n    }\n    if (type(data) === 'array') {\n      data = chroma.analyze(data);\n    }\n    min = data.min;\n    max = data.max;\n    sum = data.sum;\n    values = data.values.sort(function(a, b) {\n      return a - b;\n    });\n    if (num === 1) {\n      return [min, max];\n    }\n    limits = [];\n    if (mode.substr(0, 1) === 'c') {\n      limits.push(min);\n      limits.push(max);\n    }\n    if (mode.substr(0, 1) === 'e') {\n      limits.push(min);\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        limits.push(min + (i / num) * (max - min));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n      if (min <= 0) {\n        throw 'Logarithmic scales are only possible for values > 0';\n      }\n      min_log = Math.LOG10E * log(min);\n      max_log = Math.LOG10E * log(max);\n      limits.push(min);\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n      limits.push(min);\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n        p = (values.length - 1) * i / num;\n        pb = floor(p);\n        if (pb === p) {\n          limits.push(values[pb]);\n        } else {\n          pr = p - pb;\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n        }\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n\n      /*\n      implementation based on\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n      simplified for 1-d input values\n       */\n      n = values.length;\n      assignments = new Array(n);\n      clusterSizes = new Array(num);\n      repeat = true;\n      nb_iters = 0;\n      centroids = null;\n      centroids = [];\n      centroids.push(min);\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n        centroids.push(min + (i / num) * (max - min));\n      }\n      centroids.push(max);\n      while (repeat) {\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n          clusterSizes[j] = 0;\n        }\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n          value = values[i];\n          mindist = Number.MAX_VALUE;\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n            dist = abs(centroids[j] - value);\n            if (dist < mindist) {\n              mindist = dist;\n              best = j;\n            }\n          }\n          clusterSizes[best]++;\n          assignments[i] = best;\n        }\n        newCentroids = new Array(num);\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n          newCentroids[j] = null;\n        }\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n          cluster = assignments[i];\n          if (newCentroids[cluster] === null) {\n            newCentroids[cluster] = values[i];\n          } else {\n            newCentroids[cluster] += values[i];\n          }\n        }\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n          newCentroids[j] *= 1 / clusterSizes[j];\n        }\n        repeat = false;\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n          if (newCentroids[j] !== centroids[i]) {\n            repeat = true;\n            break;\n          }\n        }\n        centroids = newCentroids;\n        nb_iters++;\n        if (nb_iters > 200) {\n          repeat = false;\n        }\n      }\n      kClusters = {};\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n        kClusters[j] = [];\n      }\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n        cluster = assignments[i];\n        kClusters[cluster].push(values[i]);\n      }\n      tmpKMeansBreaks = [];\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n        tmpKMeansBreaks.push(kClusters[j][0]);\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n      }\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n        return a - b;\n      });\n      limits.push(tmpKMeansBreaks[0]);\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n        v = tmpKMeansBreaks[i];\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\n          limits.push(v);\n        }\n      }\n    }\n    return limits;\n  };\n\n  hsi2rgb = function(h, s, i) {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n    var args, b, g, r;\n    args = unpack(arguments);\n    h = args[0], s = args[1], i = args[2];\n    if (isNaN(h)) {\n      h = 0;\n    }\n    h /= 360;\n    if (h < 1 / 3) {\n      b = (1 - s) / 3;\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n      h -= 1 / 3;\n      r = (1 - s) / 3;\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      b = 1 - (r + g);\n    } else {\n      h -= 2 / 3;\n      g = (1 - s) / 3;\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsi = function() {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n     */\n    var b, g, h, i, min, r, ref, s;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    TWOPI = Math.PI * 2;\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    i = (r + g + b) / 3;\n    s = 1 - min / i;\n    if (s === 0) {\n      h = 0;\n    } else {\n      h = ((r - g) + (r - b)) / 2;\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n      h = Math.acos(h);\n      if (b > g) {\n        h = TWOPI - h;\n      }\n      h /= TWOPI;\n    }\n    return [h * 360, s, i];\n  };\n\n  chroma.hsi = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n  };\n\n  _input.hsi = hsi2rgb;\n\n  Color.prototype.hsi = function() {\n    return rgb2hsi(this._rgb);\n  };\n\n  interpolate_hsx = function(col1, col2, f, m) {\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n    if (m === 'hsl') {\n      xyz0 = col1.hsl();\n      xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n      xyz0 = col1.hsv();\n      xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n      xyz0 = col1.hcg();\n      xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n      xyz0 = col1.hsi();\n      xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n      m = 'hcl';\n      xyz0 = col1.hcl();\n      xyz1 = col2.hcl();\n    }\n    if (m.substr(0, 1) === 'h') {\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n    }\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\n        dh = hue1 - (hue0 + 360);\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n        dh = hue1 + 360 - hue0;\n      } else {\n        dh = hue1 - hue0;\n      }\n      hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n      hue = hue0;\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n        sat = sat0;\n      }\n    } else if (!isNaN(hue1)) {\n      hue = hue1;\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n        sat = sat1;\n      }\n    } else {\n      hue = Number.NaN;\n    }\n    if (sat == null) {\n      sat = sat0 + f * (sat1 - sat0);\n    }\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return res = chroma[m](hue, sat, lbv);\n  };\n\n  _interpolators = _interpolators.concat((function() {\n    var len, o, ref, results;\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n    results = [];\n    for (o = 0, len = ref.length; o < len; o++) {\n      m = ref[o];\n      results.push([m, interpolate_hsx]);\n    }\n    return results;\n  })());\n\n  interpolate_num = function(col1, col2, f, m) {\n    var n1, n2;\n    n1 = col1.num();\n    n2 = col2.num();\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\n  };\n\n  _interpolators.push(['num', interpolate_num]);\n\n  interpolate_lab = function(col1, col2, f, m) {\n    var res, xyz0, xyz1;\n    xyz0 = col1.lab();\n    xyz1 = col2.lab();\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['lab', interpolate_lab]);\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chroma-js/chroma.js\n// module id = 94\n// module chunks = 15631302298456 35783957827783","import React from 'react';\nimport _ from 'lodash';\nimport chroma from 'chroma-js';\n\nimport SectionHeader from '../components/section-header';\nimport token from 'otkit-colors/token.common';\nimport styles from '../styles/otkit-colors.module.css';\n\n// take a hex and give us a nice text color to put over it\nconst textColor = hex => {\n  const vsWhite = chroma.contrast(hex, 'white');\n  if (vsWhite > 4) {\n    return '#FFF';\n  }\n  return chroma(hex)\n    .darken(3)\n    .hex();\n};\n\nconst Colors = () => {\n  /* find all the base colors, then display their derived colors in groups,\n   by color. */\n  const baseColors = _.pickBy(token, (value, key) => {\n    return _.kebabCase(key).indexOf('-') == -1;\n  });\n\n  const groups = _.map(baseColors, (value, key) => {\n    const relatedColors = _.pickBy(token, (val, proposedKey) => {\n      return proposedKey.indexOf(key) != -1;\n    });\n\n    const tokens = _.toPairsIn(relatedColors)\n      .sort((left, right) => {\n        return chroma(left[1]).luminance() - chroma(right[1]).luminance();\n      })\n      .map((token, index) => {\n        const rgb = token[1];\n        const name = token[0];\n\n        const colorBlock =\n          chroma.contrast(rgb, 'white') > 4\n            ? 'color-block'\n            : 'color-block-border';\n\n        return (\n          <div className={styles['card']} key={index}>\n            <div\n              className={styles[colorBlock]}\n              style={{ backgroundColor: rgb, color: textColor(rgb) }}\n            >\n              <div className={styles['color-hex']}>{chroma(rgb).hex()}</div>\n              <div className={styles['color-rgb']}>{rgb}</div>\n            </div>\n            <div className={styles['color-name']}>{_.kebabCase(name)}</div>\n          </div>\n        );\n      });\n\n    return <div className={styles['section-color']}>{tokens}</div>;\n  });\n\n  return (\n    <div className={styles['main-container']}>\n      <SectionHeader text=\"Colors\" type=\"SectionHeader__small\" />\n      {groups.map((group, index) => <div key={index}>{group}</div>)}\n    </div>\n  );\n};\n\nexport default Colors;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/otkit-colors.js","// removed by extract-text-webpack-plugin\nmodule.exports = {\"spacing-xsmall\":\"4px\",\"spacing-small\":\"8px\",\"spacing-medium\":\"16px\",\"spacing-large\":\"32px\",\"spacing-xlarge\":\"48px\",\"xsmall-regular-font-size\":\"14px\",\"xsmall-regular-font-weight\":\"normal\",\"xsmall-regular-line-height\":\"20px\",\"xsmall-medium-font-size\":\"14px\",\"xsmall-medium-font-weight\":\"500\",\"xsmall-medium-line-height\":\"20px\",\"border-radius-small\":\"4px\",\"ash-lighter\":\"#d8d9db\",\"width-main\":\"768px\",\"section-color\":\"src-styles----otkit-colors-module---section-color---20MAg\",\"card\":\"src-styles----otkit-colors-module---card---lA_pp\",\"main-container\":\"src-styles----otkit-colors-module---main-container---GVlMN\",\"color-block\":\"src-styles----otkit-colors-module---color-block---NzphN\",\"color-block-border\":\"src-styles----otkit-colors-module---color-block-border---2hGcA src-styles----otkit-colors-module---color-block---NzphN\",\"color-name\":\"src-styles----otkit-colors-module---color-name---2-obi\",\"color-hex\":\"src-styles----otkit-colors-module---color-hex---3UT0c\",\"color-rgb\":\"src-styles----otkit-colors-module---color-rgb---30n2t\"};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/otkit-colors.module.css\n// module id = 119\n// module chunks = 15631302298456 35783957827783"],"sourceRoot":""}